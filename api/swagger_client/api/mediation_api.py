# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MediationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def mediation_default_mediator_delete(self, **kwargs):  # noqa: E501
        """Clear default mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_default_mediator_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_default_mediator_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mediation_default_mediator_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def mediation_default_mediator_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Clear default mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_default_mediator_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_default_mediator_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/default-mediator', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_default_mediator_get(self, **kwargs):  # noqa: E501
        """Get default mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_default_mediator_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_default_mediator_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mediation_default_mediator_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mediation_default_mediator_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get default mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_default_mediator_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_default_mediator_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/default-mediator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_keylists_get(self, **kwargs):  # noqa: E501
        """Retrieve keylists by connection or role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_keylists_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (optional)
        :param str role: Filer on role, 'client' for keys         mediated by other agents, 'server' for keys         mediated by this agent
        :return: Keylist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_keylists_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mediation_keylists_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mediation_keylists_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve keylists by connection or role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_keylists_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (optional)
        :param str role: Filer on role, 'client' for keys         mediated by other agents, 'server' for keys         mediated by this agent
        :return: Keylist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conn_id', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_keylists_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'conn_id' in params:
            query_params.append(('conn_id', params['conn_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/keylists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Keylist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_keylists_mediation_id_send_keylist_query_post(self, mediation_id, **kwargs):  # noqa: E501
        """Send keylist query to mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_keylists_mediation_id_send_keylist_query_post(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :param KeylistQueryFilterRequest body:
        :param int paginate_limit: limit number of results
        :param int paginate_offset: offset to use in pagination
        :return: KeylistQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_keylists_mediation_id_send_keylist_query_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_keylists_mediation_id_send_keylist_query_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
            return data

    def mediation_keylists_mediation_id_send_keylist_query_post_with_http_info(self, mediation_id, **kwargs):  # noqa: E501
        """Send keylist query to mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_keylists_mediation_id_send_keylist_query_post_with_http_info(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :param KeylistQueryFilterRequest body:
        :param int paginate_limit: limit number of results
        :param int paginate_offset: offset to use in pagination
        :return: KeylistQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_id', 'body', 'paginate_limit', 'paginate_offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_keylists_mediation_id_send_keylist_query_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_id' is set
        if self.api_client.client_side_validation and ('mediation_id' not in params or
                                                       params['mediation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mediation_id` when calling `mediation_keylists_mediation_id_send_keylist_query_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediation_id' in params:
            path_params['mediation_id'] = params['mediation_id']  # noqa: E501

        query_params = []
        if 'paginate_limit' in params:
            query_params.append(('paginate_limit', params['paginate_limit']))  # noqa: E501
        if 'paginate_offset' in params:
            query_params.append(('paginate_offset', params['paginate_offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/keylists/{mediation_id}/send-keylist-query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeylistQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_keylists_mediation_id_send_keylist_update_post(self, mediation_id, **kwargs):  # noqa: E501
        """Send keylist update to mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_keylists_mediation_id_send_keylist_update_post(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :param KeylistUpdateRequest body:
        :return: KeylistUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_keylists_mediation_id_send_keylist_update_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_keylists_mediation_id_send_keylist_update_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
            return data

    def mediation_keylists_mediation_id_send_keylist_update_post_with_http_info(self, mediation_id, **kwargs):  # noqa: E501
        """Send keylist update to mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_keylists_mediation_id_send_keylist_update_post_with_http_info(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :param KeylistUpdateRequest body:
        :return: KeylistUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_keylists_mediation_id_send_keylist_update_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_id' is set
        if self.api_client.client_side_validation and ('mediation_id' not in params or
                                                       params['mediation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mediation_id` when calling `mediation_keylists_mediation_id_send_keylist_update_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediation_id' in params:
            path_params['mediation_id'] = params['mediation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/keylists/{mediation_id}/send-keylist-update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeylistUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_mediation_id_default_mediator_put(self, mediation_id, **kwargs):  # noqa: E501
        """Set default mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_mediation_id_default_mediator_put(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_mediation_id_default_mediator_put_with_http_info(mediation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_mediation_id_default_mediator_put_with_http_info(mediation_id, **kwargs)  # noqa: E501
            return data

    def mediation_mediation_id_default_mediator_put_with_http_info(self, mediation_id, **kwargs):  # noqa: E501
        """Set default mediator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_mediation_id_default_mediator_put_with_http_info(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_mediation_id_default_mediator_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_id' is set
        if self.api_client.client_side_validation and ('mediation_id' not in params or
                                                       params['mediation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mediation_id` when calling `mediation_mediation_id_default_mediator_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediation_id' in params:
            path_params['mediation_id'] = params['mediation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/{mediation_id}/default-mediator', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_request_conn_id_post(self, conn_id, **kwargs):  # noqa: E501
        """Request mediation from connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_request_conn_id_post(conn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (required)
        :param MediationCreateRequest body:
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_request_conn_id_post_with_http_info(conn_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_request_conn_id_post_with_http_info(conn_id, **kwargs)  # noqa: E501
            return data

    def mediation_request_conn_id_post_with_http_info(self, conn_id, **kwargs):  # noqa: E501
        """Request mediation from connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_request_conn_id_post_with_http_info(conn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (required)
        :param MediationCreateRequest body:
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conn_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_request_conn_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conn_id' is set
        if self.api_client.client_side_validation and ('conn_id' not in params or
                                                       params['conn_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `conn_id` when calling `mediation_request_conn_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conn_id' in params:
            path_params['conn_id'] = params['conn_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/request/{conn_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_requests_get(self, **kwargs):  # noqa: E501
        """Query mediation requests, returns list of all mediation records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (optional)
        :param list[str] mediator_terms: List of mediator rules for recipient
        :param list[str] recipient_terms: List of recipient rules for mediation
        :param str state: Mediation state (optional)
        :return: MediationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_requests_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mediation_requests_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def mediation_requests_get_with_http_info(self, **kwargs):  # noqa: E501
        """Query mediation requests, returns list of all mediation records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (optional)
        :param list[str] mediator_terms: List of mediator rules for recipient
        :param list[str] recipient_terms: List of recipient rules for mediation
        :param str state: Mediation state (optional)
        :return: MediationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conn_id', 'mediator_terms', 'recipient_terms', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_requests_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'conn_id' in params:
            query_params.append(('conn_id', params['conn_id']))  # noqa: E501
        if 'mediator_terms' in params:
            query_params.append(('mediator_terms', params['mediator_terms']))  # noqa: E501
            collection_formats['mediator_terms'] = 'multi'  # noqa: E501
        if 'recipient_terms' in params:
            query_params.append(('recipient_terms', params['recipient_terms']))  # noqa: E501
            collection_formats['recipient_terms'] = 'multi'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_requests_mediation_id_delete(self, mediation_id, **kwargs):  # noqa: E501
        """Delete mediation request by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_delete(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_requests_mediation_id_delete_with_http_info(mediation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_requests_mediation_id_delete_with_http_info(mediation_id, **kwargs)  # noqa: E501
            return data

    def mediation_requests_mediation_id_delete_with_http_info(self, mediation_id, **kwargs):  # noqa: E501
        """Delete mediation request by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_delete_with_http_info(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_requests_mediation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_id' is set
        if self.api_client.client_side_validation and ('mediation_id' not in params or
                                                       params['mediation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mediation_id` when calling `mediation_requests_mediation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediation_id' in params:
            path_params['mediation_id'] = params['mediation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/requests/{mediation_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_requests_mediation_id_deny_post(self, mediation_id, **kwargs):  # noqa: E501
        """Deny a stored mediation request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_deny_post(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :param AdminMediationDeny body:
        :return: MediationDeny
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_requests_mediation_id_deny_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_requests_mediation_id_deny_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
            return data

    def mediation_requests_mediation_id_deny_post_with_http_info(self, mediation_id, **kwargs):  # noqa: E501
        """Deny a stored mediation request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_deny_post_with_http_info(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :param AdminMediationDeny body:
        :return: MediationDeny
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_requests_mediation_id_deny_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_id' is set
        if self.api_client.client_side_validation and ('mediation_id' not in params or
                                                       params['mediation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mediation_id` when calling `mediation_requests_mediation_id_deny_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediation_id' in params:
            path_params['mediation_id'] = params['mediation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/requests/{mediation_id}/deny', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationDeny',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_requests_mediation_id_get(self, mediation_id, **kwargs):  # noqa: E501
        """Retrieve mediation request record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_get(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_requests_mediation_id_get_with_http_info(mediation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_requests_mediation_id_get_with_http_info(mediation_id, **kwargs)  # noqa: E501
            return data

    def mediation_requests_mediation_id_get_with_http_info(self, mediation_id, **kwargs):  # noqa: E501
        """Retrieve mediation request record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_get_with_http_info(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_requests_mediation_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_id' is set
        if self.api_client.client_side_validation and ('mediation_id' not in params or
                                                       params['mediation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mediation_id` when calling `mediation_requests_mediation_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediation_id' in params:
            path_params['mediation_id'] = params['mediation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/requests/{mediation_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mediation_requests_mediation_id_grant_post(self, mediation_id, **kwargs):  # noqa: E501
        """Grant received mediation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_grant_post(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationGrant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mediation_requests_mediation_id_grant_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mediation_requests_mediation_id_grant_post_with_http_info(mediation_id, **kwargs)  # noqa: E501
            return data

    def mediation_requests_mediation_id_grant_post_with_http_info(self, mediation_id, **kwargs):  # noqa: E501
        """Grant received mediation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mediation_requests_mediation_id_grant_post_with_http_info(mediation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediation_id: Mediation record identifier (required)
        :return: MediationGrant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mediation_requests_mediation_id_grant_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_id' is set
        if self.api_client.client_side_validation and ('mediation_id' not in params or
                                                       params['mediation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mediation_id` when calling `mediation_requests_mediation_id_grant_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediation_id' in params:
            path_params['mediation_id'] = params['mediation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediation/requests/{mediation_id}/grant', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediationGrant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
