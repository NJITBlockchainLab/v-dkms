# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LedgerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ledger_did_endpoint_get(self, did, **kwargs):  # noqa: E501
        """Get the endpoint for a DID from the ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_did_endpoint_get(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID of interest (required)
        :param str endpoint_type: Endpoint type of interest (default 'Endpoint')
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ledger_did_endpoint_get_with_http_info(did, **kwargs)  # noqa: E501
        else:
            (data) = self.ledger_did_endpoint_get_with_http_info(did, **kwargs)  # noqa: E501
            return data

    def ledger_did_endpoint_get_with_http_info(self, did, **kwargs):  # noqa: E501
        """Get the endpoint for a DID from the ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_did_endpoint_get_with_http_info(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID of interest (required)
        :param str endpoint_type: Endpoint type of interest (default 'Endpoint')
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'endpoint_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ledger_did_endpoint_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in params or
                                                       params['did'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `did` when calling `ledger_did_endpoint_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('did' in params and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', params['did'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `did` when calling `ledger_did_endpoint_get`, must conform to the pattern `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'did' in params:
            query_params.append(('did', params['did']))  # noqa: E501
        if 'endpoint_type' in params:
            query_params.append(('endpoint_type', params['endpoint_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ledger/did-endpoint', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerModulesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ledger_did_verkey_get(self, did, **kwargs):  # noqa: E501
        """Get the verkey for a DID from the ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_did_verkey_get(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID of interest (required)
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ledger_did_verkey_get_with_http_info(did, **kwargs)  # noqa: E501
        else:
            (data) = self.ledger_did_verkey_get_with_http_info(did, **kwargs)  # noqa: E501
            return data

    def ledger_did_verkey_get_with_http_info(self, did, **kwargs):  # noqa: E501
        """Get the verkey for a DID from the ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_did_verkey_get_with_http_info(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID of interest (required)
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ledger_did_verkey_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in params or
                                                       params['did'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `did` when calling `ledger_did_verkey_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('did' in params and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', params['did'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `did` when calling `ledger_did_verkey_get`, must conform to the pattern `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'did' in params:
            query_params.append(('did', params['did']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ledger/did-verkey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerModulesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ledger_get_nym_role_get(self, did, **kwargs):  # noqa: E501
        """Get the role from the NYM registration of a public DID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_get_nym_role_get(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID of interest (required)
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ledger_get_nym_role_get_with_http_info(did, **kwargs)  # noqa: E501
        else:
            (data) = self.ledger_get_nym_role_get_with_http_info(did, **kwargs)  # noqa: E501
            return data

    def ledger_get_nym_role_get_with_http_info(self, did, **kwargs):  # noqa: E501
        """Get the role from the NYM registration of a public DID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_get_nym_role_get_with_http_info(did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID of interest (required)
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ledger_get_nym_role_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in params or
                                                       params['did'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `did` when calling `ledger_get_nym_role_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('did' in params and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', params['did'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `did` when calling `ledger_get_nym_role_get`, must conform to the pattern `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'did' in params:
            query_params.append(('did', params['did']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ledger/get-nym-role', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerModulesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ledger_register_nym_post(self, did, verkey, **kwargs):  # noqa: E501
        """Send a NYM registration to the ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_register_nym_post(did, verkey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID to register (required)
        :param str verkey: Verification key (required)
        :param str alias: Alias
        :param str role: Role
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ledger_register_nym_post_with_http_info(did, verkey, **kwargs)  # noqa: E501
        else:
            (data) = self.ledger_register_nym_post_with_http_info(did, verkey, **kwargs)  # noqa: E501
            return data

    def ledger_register_nym_post_with_http_info(self, did, verkey, **kwargs):  # noqa: E501
        """Send a NYM registration to the ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_register_nym_post_with_http_info(did, verkey, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: DID to register (required)
        :param str verkey: Verification key (required)
        :param str alias: Alias
        :param str role: Role
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'verkey', 'alias', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ledger_register_nym_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if self.api_client.client_side_validation and ('did' not in params or
                                                       params['did'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `did` when calling `ledger_register_nym_post`")  # noqa: E501
        # verify the required parameter 'verkey' is set
        if self.api_client.client_side_validation and ('verkey' not in params or
                                                       params['verkey'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `verkey` when calling `ledger_register_nym_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('did' in params and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', params['did'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `did` when calling `ledger_register_nym_post`, must conform to the pattern `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('verkey' in params and not re.search(r'^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$', params['verkey'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `verkey` when calling `ledger_register_nym_post`, must conform to the pattern `/^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'did' in params:
            query_params.append(('did', params['did']))  # noqa: E501
        if 'verkey' in params:
            query_params.append(('verkey', params['verkey']))  # noqa: E501
        if 'alias' in params:
            query_params.append(('alias', params['alias']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ledger/register-nym', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerModulesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ledger_rotate_public_did_keypair_patch(self, **kwargs):  # noqa: E501
        """Rotate key pair for public DID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_rotate_public_did_keypair_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ledger_rotate_public_did_keypair_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ledger_rotate_public_did_keypair_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def ledger_rotate_public_did_keypair_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Rotate key pair for public DID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_rotate_public_did_keypair_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ledger_rotate_public_did_keypair_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ledger/rotate-public-did-keypair', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerModulesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ledger_taa_accept_post(self, **kwargs):  # noqa: E501
        """Accept the transaction author agreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_taa_accept_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TAAAccept body:
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ledger_taa_accept_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ledger_taa_accept_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def ledger_taa_accept_post_with_http_info(self, **kwargs):  # noqa: E501
        """Accept the transaction author agreement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_taa_accept_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TAAAccept body:
        :return: LedgerModulesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ledger_taa_accept_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ledger/taa/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerModulesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ledger_taa_get(self, **kwargs):  # noqa: E501
        """Fetch the current transaction author agreement, if any  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_taa_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TAAResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ledger_taa_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ledger_taa_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ledger_taa_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch the current transaction author agreement, if any  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ledger_taa_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TAAResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ledger_taa_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ledger/taa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TAAResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
