# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DidExchangeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def didexchange_conn_id_accept_invitation_post(self, conn_id, **kwargs):  # noqa: E501
        """Accept a stored connection invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_conn_id_accept_invitation_post(conn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (required)
        :param str my_endpoint: My URL endpoint
        :param str my_label: Label for connection request
        :return: ConnRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.didexchange_conn_id_accept_invitation_post_with_http_info(conn_id, **kwargs)  # noqa: E501
        else:
            (data) = self.didexchange_conn_id_accept_invitation_post_with_http_info(conn_id, **kwargs)  # noqa: E501
            return data

    def didexchange_conn_id_accept_invitation_post_with_http_info(self, conn_id, **kwargs):  # noqa: E501
        """Accept a stored connection invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_conn_id_accept_invitation_post_with_http_info(conn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (required)
        :param str my_endpoint: My URL endpoint
        :param str my_label: Label for connection request
        :return: ConnRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conn_id', 'my_endpoint', 'my_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method didexchange_conn_id_accept_invitation_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conn_id' is set
        if self.api_client.client_side_validation and ('conn_id' not in params or
                                                       params['conn_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `conn_id` when calling `didexchange_conn_id_accept_invitation_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('my_endpoint' in params and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', params['my_endpoint'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `my_endpoint` when calling `didexchange_conn_id_accept_invitation_post`, must conform to the pattern `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'conn_id' in params:
            path_params['conn_id'] = params['conn_id']  # noqa: E501

        query_params = []
        if 'my_endpoint' in params:
            query_params.append(('my_endpoint', params['my_endpoint']))  # noqa: E501
        if 'my_label' in params:
            query_params.append(('my_label', params['my_label']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/didexchange/{conn_id}/accept-invitation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def didexchange_conn_id_accept_request_post(self, conn_id, **kwargs):  # noqa: E501
        """Accept a stored connection request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_conn_id_accept_request_post(conn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (required)
        :param str mediation_id: Identifier for active mediation record to be used
        :param str my_endpoint: My URL endpoint
        :return: ConnRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.didexchange_conn_id_accept_request_post_with_http_info(conn_id, **kwargs)  # noqa: E501
        else:
            (data) = self.didexchange_conn_id_accept_request_post_with_http_info(conn_id, **kwargs)  # noqa: E501
            return data

    def didexchange_conn_id_accept_request_post_with_http_info(self, conn_id, **kwargs):  # noqa: E501
        """Accept a stored connection request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_conn_id_accept_request_post_with_http_info(conn_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conn_id: Connection identifier (required)
        :param str mediation_id: Identifier for active mediation record to be used
        :param str my_endpoint: My URL endpoint
        :return: ConnRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conn_id', 'mediation_id', 'my_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method didexchange_conn_id_accept_request_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conn_id' is set
        if self.api_client.client_side_validation and ('conn_id' not in params or
                                                       params['conn_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `conn_id` when calling `didexchange_conn_id_accept_request_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('mediation_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['mediation_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `mediation_id` when calling `didexchange_conn_id_accept_request_post`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('my_endpoint' in params and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', params['my_endpoint'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `my_endpoint` when calling `didexchange_conn_id_accept_request_post`, must conform to the pattern `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'conn_id' in params:
            path_params['conn_id'] = params['conn_id']  # noqa: E501

        query_params = []
        if 'mediation_id' in params:
            query_params.append(('mediation_id', params['mediation_id']))  # noqa: E501
        if 'my_endpoint' in params:
            query_params.append(('my_endpoint', params['my_endpoint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/didexchange/{conn_id}/accept-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def didexchange_create_request_post(self, their_public_did, **kwargs):  # noqa: E501
        """Create request against public DID's implicit invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_create_request_post(their_public_did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str their_public_did: Public DID to which to request connection (required)
        :param str mediation_id: Identifier for active mediation record to be used
        :param str my_endpoint: My URL endpoint
        :param str my_label: Label for connection request
        :return: DIDXRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.didexchange_create_request_post_with_http_info(their_public_did, **kwargs)  # noqa: E501
        else:
            (data) = self.didexchange_create_request_post_with_http_info(their_public_did, **kwargs)  # noqa: E501
            return data

    def didexchange_create_request_post_with_http_info(self, their_public_did, **kwargs):  # noqa: E501
        """Create request against public DID's implicit invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_create_request_post_with_http_info(their_public_did, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str their_public_did: Public DID to which to request connection (required)
        :param str mediation_id: Identifier for active mediation record to be used
        :param str my_endpoint: My URL endpoint
        :param str my_label: Label for connection request
        :return: DIDXRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['their_public_did', 'mediation_id', 'my_endpoint', 'my_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method didexchange_create_request_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'their_public_did' is set
        if self.api_client.client_side_validation and ('their_public_did' not in params or
                                                       params['their_public_did'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `their_public_did` when calling `didexchange_create_request_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('their_public_did' in params and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', params['their_public_did'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `their_public_did` when calling `didexchange_create_request_post`, must conform to the pattern `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('mediation_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['mediation_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `mediation_id` when calling `didexchange_create_request_post`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('my_endpoint' in params and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', params['my_endpoint'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `my_endpoint` when calling `didexchange_create_request_post`, must conform to the pattern `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'their_public_did' in params:
            query_params.append(('their_public_did', params['their_public_did']))  # noqa: E501
        if 'mediation_id' in params:
            query_params.append(('mediation_id', params['mediation_id']))  # noqa: E501
        if 'my_endpoint' in params:
            query_params.append(('my_endpoint', params['my_endpoint']))  # noqa: E501
        if 'my_label' in params:
            query_params.append(('my_label', params['my_label']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/didexchange/create-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DIDXRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def didexchange_receive_request_post(self, **kwargs):  # noqa: E501
        """Receive request against public DID's implicit invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_receive_request_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DIDXRequest body:
        :param str alias: Alias for connection
        :param bool auto_accept: Auto-accept connection (defaults to configuration)
        :param str mediation_id: Identifier for active mediation record to be used
        :param str my_endpoint: My URL endpoint
        :return: ConnRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.didexchange_receive_request_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.didexchange_receive_request_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def didexchange_receive_request_post_with_http_info(self, **kwargs):  # noqa: E501
        """Receive request against public DID's implicit invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.didexchange_receive_request_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DIDXRequest body:
        :param str alias: Alias for connection
        :param bool auto_accept: Auto-accept connection (defaults to configuration)
        :param str mediation_id: Identifier for active mediation record to be used
        :param str my_endpoint: My URL endpoint
        :return: ConnRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'alias', 'auto_accept', 'mediation_id', 'my_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method didexchange_receive_request_post" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('mediation_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['mediation_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `mediation_id` when calling `didexchange_receive_request_post`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('my_endpoint' in params and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', params['my_endpoint'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `my_endpoint` when calling `didexchange_receive_request_post`, must conform to the pattern `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'alias' in params:
            query_params.append(('alias', params['alias']))  # noqa: E501
        if 'auto_accept' in params:
            query_params.append(('auto_accept', params['auto_accept']))  # noqa: E501
        if 'mediation_id' in params:
            query_params.append(('mediation_id', params['mediation_id']))  # noqa: E501
        if 'my_endpoint' in params:
            query_params.append(('my_endpoint', params['my_endpoint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/didexchange/receive-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
