# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RevocationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def revocation_active_registry_cred_def_id_get(self, cred_def_id, **kwargs):  # noqa: E501
        """Get current active revocation registry by credential definition id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_active_registry_cred_def_id_get(cred_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cred_def_id: Credential definition identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_active_registry_cred_def_id_get_with_http_info(cred_def_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_active_registry_cred_def_id_get_with_http_info(cred_def_id, **kwargs)  # noqa: E501
            return data

    def revocation_active_registry_cred_def_id_get_with_http_info(self, cred_def_id, **kwargs):  # noqa: E501
        """Get current active revocation registry by credential definition id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_active_registry_cred_def_id_get_with_http_info(cred_def_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cred_def_id: Credential definition identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cred_def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_active_registry_cred_def_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cred_def_id' is set
        if self.api_client.client_side_validation and ('cred_def_id' not in params or
                                                       params['cred_def_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cred_def_id` when calling `revocation_active_registry_cred_def_id_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('cred_def_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$', params['cred_def_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `cred_def_id` when calling `revocation_active_registry_cred_def_id_get`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cred_def_id' in params:
            path_params['cred_def_id'] = params['cred_def_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/active-registry/{cred_def_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_clear_pending_revocations_post(self, **kwargs):  # noqa: E501
        """Clear pending revocations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_clear_pending_revocations_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClearPendingRevocationsRequest body:
        :return: PublishRevocations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_clear_pending_revocations_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.revocation_clear_pending_revocations_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def revocation_clear_pending_revocations_post_with_http_info(self, **kwargs):  # noqa: E501
        """Clear pending revocations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_clear_pending_revocations_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClearPendingRevocationsRequest body:
        :return: PublishRevocations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_clear_pending_revocations_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/clear-pending-revocations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublishRevocations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_create_registry_post(self, **kwargs):  # noqa: E501
        """Creates a new revocation registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_create_registry_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RevRegCreateRequest body:
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_create_registry_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.revocation_create_registry_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def revocation_create_registry_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new revocation registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_create_registry_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RevRegCreateRequest body:
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_create_registry_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/create-registry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_credential_record_get(self, **kwargs):  # noqa: E501
        """Get credential revocation status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_credential_record_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cred_ex_id: Credential exchange identifier
        :param str cred_rev_id: Credential revocation identifier
        :param str rev_reg_id: Revocation registry identifier
        :return: CredRevRecordResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_credential_record_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.revocation_credential_record_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def revocation_credential_record_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get credential revocation status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_credential_record_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cred_ex_id: Credential exchange identifier
        :param str cred_rev_id: Credential revocation identifier
        :param str rev_reg_id: Revocation registry identifier
        :return: CredRevRecordResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cred_ex_id', 'cred_rev_id', 'rev_reg_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_credential_record_get" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('cred_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['cred_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `cred_ex_id` when calling `revocation_credential_record_get`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('cred_rev_id' in params and not re.search(r'^[1-9][0-9]*$', params['cred_rev_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `cred_rev_id` when calling `revocation_credential_record_get`, must conform to the pattern `/^[1-9][0-9]*$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_credential_record_get`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cred_ex_id' in params:
            query_params.append(('cred_ex_id', params['cred_ex_id']))  # noqa: E501
        if 'cred_rev_id' in params:
            query_params.append(('cred_rev_id', params['cred_rev_id']))  # noqa: E501
        if 'rev_reg_id' in params:
            query_params.append(('rev_reg_id', params['rev_reg_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/credential-record', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredRevRecordResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_publish_revocations_post(self, **kwargs):  # noqa: E501
        """Publish pending revocations to ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_publish_revocations_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublishRevocations body:
        :return: PublishRevocations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_publish_revocations_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.revocation_publish_revocations_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def revocation_publish_revocations_post_with_http_info(self, **kwargs):  # noqa: E501
        """Publish pending revocations to ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_publish_revocations_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublishRevocations body:
        :return: PublishRevocations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_publish_revocations_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/publish-revocations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublishRevocations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registries_created_get(self, **kwargs):  # noqa: E501
        """Search for matching revocation registries that current agent created  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registries_created_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cred_def_id: Credential definition identifier
        :param str state: Revocation registry state
        :return: RevRegsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registries_created_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registries_created_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def revocation_registries_created_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search for matching revocation registries that current agent created  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registries_created_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cred_def_id: Credential definition identifier
        :param str state: Revocation registry state
        :return: RevRegsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cred_def_id', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registries_created_get" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('cred_def_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$', params['cred_def_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `cred_def_id` when calling `revocation_registries_created_get`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cred_def_id' in params:
            query_params.append(('cred_def_id', params['cred_def_id']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registries/created', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegsCreated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_definition_post(self, rev_reg_id, **kwargs):  # noqa: E501
        """Send revocation registry definition to ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_definition_post(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_definition_post_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_definition_post_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_definition_post_with_http_info(self, rev_reg_id, **kwargs):  # noqa: E501
        """Send revocation registry definition to ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_definition_post_with_http_info(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_definition_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_definition_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_definition_post`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}/definition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_entry_post(self, rev_reg_id, **kwargs):  # noqa: E501
        """Send revocation registry entry to ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_entry_post(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_entry_post_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_entry_post_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_entry_post_with_http_info(self, rev_reg_id, **kwargs):  # noqa: E501
        """Send revocation registry entry to ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_entry_post_with_http_info(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_entry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_entry_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_entry_post`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}/entry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_get(self, rev_reg_id, **kwargs):  # noqa: E501
        """Get revocation registry by revocation registry id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_get(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_get_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_get_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_get_with_http_info(self, rev_reg_id, **kwargs):  # noqa: E501
        """Get revocation registry by revocation registry id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_get_with_http_info(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_get`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_issued_get(self, rev_reg_id, **kwargs):  # noqa: E501
        """Get number of credentials issued against revocation registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_issued_get(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegIssuedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_issued_get_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_issued_get_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_issued_get_with_http_info(self, rev_reg_id, **kwargs):  # noqa: E501
        """Get number of credentials issued against revocation registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_issued_get_with_http_info(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevRegIssuedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_issued_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_issued_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_issued_get`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}/issued', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegIssuedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_patch(self, rev_reg_id, **kwargs):  # noqa: E501
        """Update revocation registry with new public URI to its tails file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_patch(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :param RevRegUpdateTailsFileUri body:
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_patch_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_patch_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_patch_with_http_info(self, rev_reg_id, **kwargs):  # noqa: E501
        """Update revocation registry with new public URI to its tails file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_patch_with_http_info(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :param RevRegUpdateTailsFileUri body:
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_patch`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_patch`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_set_state_patch(self, rev_reg_id, state, **kwargs):  # noqa: E501
        """Set revocation registry state manually  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_set_state_patch(rev_reg_id, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :param str state: Revocation registry state to set (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_set_state_patch_with_http_info(rev_reg_id, state, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_set_state_patch_with_http_info(rev_reg_id, state, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_set_state_patch_with_http_info(self, rev_reg_id, state, **kwargs):  # noqa: E501
        """Set revocation registry state manually  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_set_state_patch_with_http_info(rev_reg_id, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :param str state: Revocation registry state to set (required)
        :return: RevRegResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_set_state_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_set_state_patch`")  # noqa: E501
        # verify the required parameter 'state' is set
        if self.api_client.client_side_validation and ('state' not in params or
                                                       params['state'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `state` when calling `revocation_registry_rev_reg_id_set_state_patch`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_set_state_patch`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}/set-state', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevRegResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_tails_file_get(self, rev_reg_id, **kwargs):  # noqa: E501
        """Download tails file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_tails_file_get(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_tails_file_get_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_tails_file_get_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_tails_file_get_with_http_info(self, rev_reg_id, **kwargs):  # noqa: E501
        """Download tails file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_tails_file_get_with_http_info(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_tails_file_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_tails_file_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_tails_file_get`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}/tails-file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_registry_rev_reg_id_tails_file_put(self, rev_reg_id, **kwargs):  # noqa: E501
        """Upload local tails file to server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_tails_file_put(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevocationModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_registry_rev_reg_id_tails_file_put_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revocation_registry_rev_reg_id_tails_file_put_with_http_info(rev_reg_id, **kwargs)  # noqa: E501
            return data

    def revocation_registry_rev_reg_id_tails_file_put_with_http_info(self, rev_reg_id, **kwargs):  # noqa: E501
        """Upload local tails file to server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_registry_rev_reg_id_tails_file_put_with_http_info(rev_reg_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rev_reg_id: Revocation Registry identifier (required)
        :return: RevocationModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rev_reg_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_registry_rev_reg_id_tails_file_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rev_reg_id' is set
        if self.api_client.client_side_validation and ('rev_reg_id' not in params or
                                                       params['rev_reg_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_tails_file_put`")  # noqa: E501

        if self.api_client.client_side_validation and ('rev_reg_id' in params and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)', params['rev_reg_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `rev_reg_id` when calling `revocation_registry_rev_reg_id_tails_file_put`, must conform to the pattern `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'rev_reg_id' in params:
            path_params['rev_reg_id'] = params['rev_reg_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/registry/{rev_reg_id}/tails-file', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevocationModuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revocation_revoke_post(self, **kwargs):  # noqa: E501
        """Revoke an issued credential  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_revoke_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RevokeRequest body:
        :return: RevocationModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revocation_revoke_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.revocation_revoke_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def revocation_revoke_post_with_http_info(self, **kwargs):  # noqa: E501
        """Revoke an issued credential  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revocation_revoke_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RevokeRequest body:
        :return: RevocationModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revocation_revoke_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revocation/revoke', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevocationModuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
