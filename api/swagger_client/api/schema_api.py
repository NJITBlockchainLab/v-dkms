# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SchemaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def schemas_created_get(self, **kwargs):  # noqa: E501
        """Search for matching schema that agent originated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schemas_created_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: Schema identifier
        :param str schema_issuer_did: Schema issuer DID
        :param str schema_name: Schema name
        :param str schema_version: Schema version
        :return: SchemasCreatedResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.schemas_created_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.schemas_created_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def schemas_created_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search for matching schema that agent originated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schemas_created_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: Schema identifier
        :param str schema_issuer_did: Schema issuer DID
        :param str schema_name: Schema name
        :param str schema_version: Schema version
        :return: SchemasCreatedResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_id', 'schema_issuer_did', 'schema_name', 'schema_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schemas_created_get" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('schema_id' in params and not re.search(r'^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$', params['schema_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `schema_id` when calling `schemas_created_get`, must conform to the pattern `/^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('schema_issuer_did' in params and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', params['schema_issuer_did'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `schema_issuer_did` when calling `schemas_created_get`, must conform to the pattern `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('schema_version' in params and not re.search(r'^[0-9.]+$', params['schema_version'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `schema_version` when calling `schemas_created_get`, must conform to the pattern `/^[0-9.]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'schema_id' in params:
            query_params.append(('schema_id', params['schema_id']))  # noqa: E501
        if 'schema_issuer_did' in params:
            query_params.append(('schema_issuer_did', params['schema_issuer_did']))  # noqa: E501
        if 'schema_name' in params:
            query_params.append(('schema_name', params['schema_name']))  # noqa: E501
        if 'schema_version' in params:
            query_params.append(('schema_version', params['schema_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/schemas/created', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemasCreatedResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schemas_post(self, **kwargs):  # noqa: E501
        """Sends a schema to the ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schemas_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SchemaSendRequest body:
        :return: SchemaSendResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.schemas_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.schemas_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def schemas_post_with_http_info(self, **kwargs):  # noqa: E501
        """Sends a schema to the ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schemas_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SchemaSendRequest body:
        :return: SchemaSendResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schemas_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/schemas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaSendResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schemas_schema_id_get(self, schema_id, **kwargs):  # noqa: E501
        """Gets a schema from the ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schemas_schema_id_get(schema_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: Schema identifier (required)
        :return: SchemaGetResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.schemas_schema_id_get_with_http_info(schema_id, **kwargs)  # noqa: E501
        else:
            (data) = self.schemas_schema_id_get_with_http_info(schema_id, **kwargs)  # noqa: E501
            return data

    def schemas_schema_id_get_with_http_info(self, schema_id, **kwargs):  # noqa: E501
        """Gets a schema from the ledger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schemas_schema_id_get_with_http_info(schema_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: Schema identifier (required)
        :return: SchemaGetResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schemas_schema_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_id' is set
        if self.api_client.client_side_validation and ('schema_id' not in params or
                                                       params['schema_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `schema_id` when calling `schemas_schema_id_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('schema_id' in params and not re.search(r'^[1-9][0-9]*|[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$', params['schema_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `schema_id` when calling `schemas_schema_id_get`, must conform to the pattern `/^[1-9][0-9]*|[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'schema_id' in params:
            path_params['schema_id'] = params['schema_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/schemas/{schema_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaGetResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
