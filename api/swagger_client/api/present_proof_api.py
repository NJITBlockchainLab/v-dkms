# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PresentProofApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def present_proof_create_request_post(self, **kwargs):  # noqa: E501
        """     Creates a presentation request not bound to any proposal or existing connection       # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_create_request_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10PresentationCreateRequestRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_create_request_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_create_request_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def present_proof_create_request_post_with_http_info(self, **kwargs):  # noqa: E501
        """     Creates a presentation request not bound to any proposal or existing connection       # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_create_request_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10PresentationCreateRequestRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_create_request_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/create-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_get(self, **kwargs):  # noqa: E501
        """Fetch all present-proof exchange records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_id: Connection identifier
        :param str role: Role assigned in presentation exchange
        :param str state: Presentation exchange state
        :param str thread_id: Thread identifier
        :return: V10PresentationExchangeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def present_proof_records_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch all present-proof exchange records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_id: Connection identifier
        :param str role: Role assigned in presentation exchange
        :param str state: Presentation exchange state
        :param str thread_id: Thread identifier
        :return: V10PresentationExchangeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connection_id', 'role', 'state', 'thread_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'connection_id' in params:
            query_params.append(('connection_id', params['connection_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'thread_id' in params:
            query_params.append(('thread_id', params['thread_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchangeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_pres_ex_id_credentials_get(self, pres_ex_id, **kwargs):  # noqa: E501
        """Fetch credentials for a presentation request from wallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_credentials_get(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param str count: Maximum number to retrieve
        :param str extra_query: (JSON) object mapping referents to extra WQL queries
        :param str referent: Proof request referents of interest, comma-separated
        :param str start: Start index
        :return: list[IndyCredPrecis]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_pres_ex_id_credentials_get_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_pres_ex_id_credentials_get_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
            return data

    def present_proof_records_pres_ex_id_credentials_get_with_http_info(self, pres_ex_id, **kwargs):  # noqa: E501
        """Fetch credentials for a presentation request from wallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_credentials_get_with_http_info(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param str count: Maximum number to retrieve
        :param str extra_query: (JSON) object mapping referents to extra WQL queries
        :param str referent: Proof request referents of interest, comma-separated
        :param str start: Start index
        :return: list[IndyCredPrecis]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pres_ex_id', 'count', 'extra_query', 'referent', 'start']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_pres_ex_id_credentials_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pres_ex_id' is set
        if self.api_client.client_side_validation and ('pres_ex_id' not in params or
                                                       params['pres_ex_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_credentials_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('pres_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['pres_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_credentials_get`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('count' in params and not re.search(r'^[1-9][0-9]*$', params['count'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `present_proof_records_pres_ex_id_credentials_get`, must conform to the pattern `/^[1-9][0-9]*$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('extra_query' in params and not re.search(r'^{\\s*\".*?\"\\s*:\\s*{.*?}\\s*(,\\s*\".*?\"\\s*:\\s*{.*?}\\s*)*\\s*}$', params['extra_query'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `extra_query` when calling `present_proof_records_pres_ex_id_credentials_get`, must conform to the pattern `/^{\\s*\".*?\"\\s*:\\s*{.*?}\\s*(,\\s*\".*?\"\\s*:\\s*{.*?}\\s*)*\\s*}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('start' in params and not re.search(r'^[0-9]*$', params['start'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `start` when calling `present_proof_records_pres_ex_id_credentials_get`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pres_ex_id' in params:
            path_params['pres_ex_id'] = params['pres_ex_id']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'extra_query' in params:
            query_params.append(('extra_query', params['extra_query']))  # noqa: E501
        if 'referent' in params:
            query_params.append(('referent', params['referent']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records/{pres_ex_id}/credentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IndyCredPrecis]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_pres_ex_id_delete(self, pres_ex_id, **kwargs):  # noqa: E501
        """Remove an existing presentation exchange record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_delete(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :return: PresentProofModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_pres_ex_id_delete_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_pres_ex_id_delete_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
            return data

    def present_proof_records_pres_ex_id_delete_with_http_info(self, pres_ex_id, **kwargs):  # noqa: E501
        """Remove an existing presentation exchange record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_delete_with_http_info(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :return: PresentProofModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pres_ex_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_pres_ex_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pres_ex_id' is set
        if self.api_client.client_side_validation and ('pres_ex_id' not in params or
                                                       params['pres_ex_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_delete`")  # noqa: E501

        if self.api_client.client_side_validation and ('pres_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['pres_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_delete`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pres_ex_id' in params:
            path_params['pres_ex_id'] = params['pres_ex_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records/{pres_ex_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PresentProofModuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_pres_ex_id_get(self, pres_ex_id, **kwargs):  # noqa: E501
        """Fetch a single presentation exchange record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_get(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_pres_ex_id_get_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_pres_ex_id_get_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
            return data

    def present_proof_records_pres_ex_id_get_with_http_info(self, pres_ex_id, **kwargs):  # noqa: E501
        """Fetch a single presentation exchange record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_get_with_http_info(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pres_ex_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_pres_ex_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pres_ex_id' is set
        if self.api_client.client_side_validation and ('pres_ex_id' not in params or
                                                       params['pres_ex_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_get`")  # noqa: E501

        if self.api_client.client_side_validation and ('pres_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['pres_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_get`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pres_ex_id' in params:
            path_params['pres_ex_id'] = params['pres_ex_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records/{pres_ex_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_pres_ex_id_problem_report_post(self, pres_ex_id, **kwargs):  # noqa: E501
        """Send a problem report for presentation exchange  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_problem_report_post(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param V10PresentationProblemReportRequest body:
        :return: PresentProofModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_pres_ex_id_problem_report_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_pres_ex_id_problem_report_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
            return data

    def present_proof_records_pres_ex_id_problem_report_post_with_http_info(self, pres_ex_id, **kwargs):  # noqa: E501
        """Send a problem report for presentation exchange  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_problem_report_post_with_http_info(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param V10PresentationProblemReportRequest body:
        :return: PresentProofModuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pres_ex_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_pres_ex_id_problem_report_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pres_ex_id' is set
        if self.api_client.client_side_validation and ('pres_ex_id' not in params or
                                                       params['pres_ex_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_problem_report_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('pres_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['pres_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_problem_report_post`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pres_ex_id' in params:
            path_params['pres_ex_id'] = params['pres_ex_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records/{pres_ex_id}/problem-report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PresentProofModuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_pres_ex_id_send_presentation_post(self, pres_ex_id, **kwargs):  # noqa: E501
        """Sends a proof presentation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_send_presentation_post(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param V10PresentationRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_pres_ex_id_send_presentation_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_pres_ex_id_send_presentation_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
            return data

    def present_proof_records_pres_ex_id_send_presentation_post_with_http_info(self, pres_ex_id, **kwargs):  # noqa: E501
        """Sends a proof presentation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_send_presentation_post_with_http_info(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param V10PresentationRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pres_ex_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_pres_ex_id_send_presentation_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pres_ex_id' is set
        if self.api_client.client_side_validation and ('pres_ex_id' not in params or
                                                       params['pres_ex_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_send_presentation_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('pres_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['pres_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_send_presentation_post`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pres_ex_id' in params:
            path_params['pres_ex_id'] = params['pres_ex_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records/{pres_ex_id}/send-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_pres_ex_id_send_request_post(self, pres_ex_id, **kwargs):  # noqa: E501
        """Sends a presentation request in reference to a proposal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_send_request_post(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param AdminAPIMessageTracing body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_pres_ex_id_send_request_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_pres_ex_id_send_request_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
            return data

    def present_proof_records_pres_ex_id_send_request_post_with_http_info(self, pres_ex_id, **kwargs):  # noqa: E501
        """Sends a presentation request in reference to a proposal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_send_request_post_with_http_info(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :param AdminAPIMessageTracing body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pres_ex_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_pres_ex_id_send_request_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pres_ex_id' is set
        if self.api_client.client_side_validation and ('pres_ex_id' not in params or
                                                       params['pres_ex_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_send_request_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('pres_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['pres_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_send_request_post`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pres_ex_id' in params:
            path_params['pres_ex_id'] = params['pres_ex_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records/{pres_ex_id}/send-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_records_pres_ex_id_verify_presentation_post(self, pres_ex_id, **kwargs):  # noqa: E501
        """Verify a received presentation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_verify_presentation_post(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_records_pres_ex_id_verify_presentation_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_records_pres_ex_id_verify_presentation_post_with_http_info(pres_ex_id, **kwargs)  # noqa: E501
            return data

    def present_proof_records_pres_ex_id_verify_presentation_post_with_http_info(self, pres_ex_id, **kwargs):  # noqa: E501
        """Verify a received presentation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_records_pres_ex_id_verify_presentation_post_with_http_info(pres_ex_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pres_ex_id: Presentation exchange identifier (required)
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pres_ex_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_records_pres_ex_id_verify_presentation_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pres_ex_id' is set
        if self.api_client.client_side_validation and ('pres_ex_id' not in params or
                                                       params['pres_ex_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_verify_presentation_post`")  # noqa: E501

        if self.api_client.client_side_validation and ('pres_ex_id' in params and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', params['pres_ex_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `pres_ex_id` when calling `present_proof_records_pres_ex_id_verify_presentation_post`, must conform to the pattern `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pres_ex_id' in params:
            path_params['pres_ex_id'] = params['pres_ex_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/records/{pres_ex_id}/verify-presentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_send_proposal_post(self, **kwargs):  # noqa: E501
        """Sends a presentation proposal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_proposal_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10PresentationProposalRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_send_proposal_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_send_proposal_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def present_proof_send_proposal_post_with_http_info(self, **kwargs):  # noqa: E501
        """Sends a presentation proposal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_proposal_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10PresentationProposalRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_send_proposal_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/send-proposal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def present_proof_send_request_post(self, **kwargs):  # noqa: E501
        """Sends a free presentation request not bound to any proposal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_request_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10PresentationSendRequestRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.present_proof_send_request_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.present_proof_send_request_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def present_proof_send_request_post_with_http_info(self, **kwargs):  # noqa: E501
        """Sends a free presentation request not bound to any proposal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.present_proof_send_request_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10PresentationSendRequestRequest body:
        :return: V10PresentationExchange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method present_proof_send_request_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/present-proof/send-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10PresentationExchange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
