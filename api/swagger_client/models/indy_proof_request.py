# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IndyProofRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'non_revoked': 'IndyProofReqNonRevoked',
        'nonce': 'str',
        'requested_attributes': 'dict(str, IndyProofReqAttrSpec)',
        'requested_predicates': 'dict(str, IndyProofReqPredSpec)',
        'version': 'str'
    }

    attribute_map = {
        'name': 'name',
        'non_revoked': 'non_revoked',
        'nonce': 'nonce',
        'requested_attributes': 'requested_attributes',
        'requested_predicates': 'requested_predicates',
        'version': 'version'
    }

    def __init__(self, name=None, non_revoked=None, nonce=None, requested_attributes=None, requested_predicates=None, version=None, _configuration=None):  # noqa: E501
        """IndyProofRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._non_revoked = None
        self._nonce = None
        self._requested_attributes = None
        self._requested_predicates = None
        self._version = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if non_revoked is not None:
            self.non_revoked = non_revoked
        if nonce is not None:
            self.nonce = nonce
        self.requested_attributes = requested_attributes
        self.requested_predicates = requested_predicates
        if version is not None:
            self.version = version

    @property
    def name(self):
        """Gets the name of this IndyProofRequest.  # noqa: E501

        Proof request name  # noqa: E501

        :return: The name of this IndyProofRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndyProofRequest.

        Proof request name  # noqa: E501

        :param name: The name of this IndyProofRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def non_revoked(self):
        """Gets the non_revoked of this IndyProofRequest.  # noqa: E501


        :return: The non_revoked of this IndyProofRequest.  # noqa: E501
        :rtype: IndyProofReqNonRevoked
        """
        return self._non_revoked

    @non_revoked.setter
    def non_revoked(self, non_revoked):
        """Sets the non_revoked of this IndyProofRequest.


        :param non_revoked: The non_revoked of this IndyProofRequest.  # noqa: E501
        :type: IndyProofReqNonRevoked
        """

        self._non_revoked = non_revoked

    @property
    def nonce(self):
        """Gets the nonce of this IndyProofRequest.  # noqa: E501

        Nonce  # noqa: E501

        :return: The nonce of this IndyProofRequest.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this IndyProofRequest.

        Nonce  # noqa: E501

        :param nonce: The nonce of this IndyProofRequest.  # noqa: E501
        :type: str
        """

        self._nonce = nonce

    @property
    def requested_attributes(self):
        """Gets the requested_attributes of this IndyProofRequest.  # noqa: E501

        Requested attribute specifications of proof request  # noqa: E501

        :return: The requested_attributes of this IndyProofRequest.  # noqa: E501
        :rtype: dict(str, IndyProofReqAttrSpec)
        """
        return self._requested_attributes

    @requested_attributes.setter
    def requested_attributes(self, requested_attributes):
        """Sets the requested_attributes of this IndyProofRequest.

        Requested attribute specifications of proof request  # noqa: E501

        :param requested_attributes: The requested_attributes of this IndyProofRequest.  # noqa: E501
        :type: dict(str, IndyProofReqAttrSpec)
        """
        if self._configuration.client_side_validation and requested_attributes is None:
            raise ValueError("Invalid value for `requested_attributes`, must not be `None`")  # noqa: E501

        self._requested_attributes = requested_attributes

    @property
    def requested_predicates(self):
        """Gets the requested_predicates of this IndyProofRequest.  # noqa: E501

        Requested predicate specifications of proof request  # noqa: E501

        :return: The requested_predicates of this IndyProofRequest.  # noqa: E501
        :rtype: dict(str, IndyProofReqPredSpec)
        """
        return self._requested_predicates

    @requested_predicates.setter
    def requested_predicates(self, requested_predicates):
        """Sets the requested_predicates of this IndyProofRequest.

        Requested predicate specifications of proof request  # noqa: E501

        :param requested_predicates: The requested_predicates of this IndyProofRequest.  # noqa: E501
        :type: dict(str, IndyProofReqPredSpec)
        """
        if self._configuration.client_side_validation and requested_predicates is None:
            raise ValueError("Invalid value for `requested_predicates`, must not be `None`")  # noqa: E501

        self._requested_predicates = requested_predicates

    @property
    def version(self):
        """Gets the version of this IndyProofRequest.  # noqa: E501

        Proof request version  # noqa: E501

        :return: The version of this IndyProofRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IndyProofRequest.

        Proof request version  # noqa: E501

        :param version: The version of this IndyProofRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                version is not None and not re.search(r'^[0-9.]+$', version)):  # noqa: E501
            raise ValueError(r"Invalid value for `version`, must be a follow pattern or equal to `/^[0-9.]+$/`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndyProofRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndyProofRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndyProofRequest):
            return True

        return self.to_dict() != other.to_dict()
