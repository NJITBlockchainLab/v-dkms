# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InvitationReceiveRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'handshake_protocols': 'list[str]',
        'label': 'str',
        'requestattach': 'list[AttachDecorator]',
        'service': 'object',
        'service_blocks': 'list[Service]',
        'service_dids': 'list[str]'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'handshake_protocols': 'handshake_protocols',
        'label': 'label',
        'requestattach': 'request~attach',
        'service': 'service',
        'service_blocks': 'service_blocks',
        'service_dids': 'service_dids'
    }

    def __init__(self, id=None, type=None, handshake_protocols=None, label=None, requestattach=None, service=None, service_blocks=None, service_dids=None, _configuration=None):  # noqa: E501
        """InvitationReceiveRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._handshake_protocols = None
        self._label = None
        self._requestattach = None
        self._service = None
        self._service_blocks = None
        self._service_dids = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if handshake_protocols is not None:
            self.handshake_protocols = handshake_protocols
        if label is not None:
            self.label = label
        if requestattach is not None:
            self.requestattach = requestattach
        if service is not None:
            self.service = service
        if service_blocks is not None:
            self.service_blocks = service_blocks
        if service_dids is not None:
            self.service_dids = service_dids

    @property
    def id(self):
        """Gets the id of this InvitationReceiveRequest.  # noqa: E501

        Message identifier  # noqa: E501

        :return: The id of this InvitationReceiveRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvitationReceiveRequest.

        Message identifier  # noqa: E501

        :param id: The id of this InvitationReceiveRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this InvitationReceiveRequest.  # noqa: E501

        Message type  # noqa: E501

        :return: The type of this InvitationReceiveRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvitationReceiveRequest.

        Message type  # noqa: E501

        :param type: The type of this InvitationReceiveRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def handshake_protocols(self):
        """Gets the handshake_protocols of this InvitationReceiveRequest.  # noqa: E501


        :return: The handshake_protocols of this InvitationReceiveRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._handshake_protocols

    @handshake_protocols.setter
    def handshake_protocols(self, handshake_protocols):
        """Sets the handshake_protocols of this InvitationReceiveRequest.


        :param handshake_protocols: The handshake_protocols of this InvitationReceiveRequest.  # noqa: E501
        :type: list[str]
        """

        self._handshake_protocols = handshake_protocols

    @property
    def label(self):
        """Gets the label of this InvitationReceiveRequest.  # noqa: E501

        Optional label  # noqa: E501

        :return: The label of this InvitationReceiveRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InvitationReceiveRequest.

        Optional label  # noqa: E501

        :param label: The label of this InvitationReceiveRequest.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def requestattach(self):
        """Gets the requestattach of this InvitationReceiveRequest.  # noqa: E501

        Optional request attachment  # noqa: E501

        :return: The requestattach of this InvitationReceiveRequest.  # noqa: E501
        :rtype: list[AttachDecorator]
        """
        return self._requestattach

    @requestattach.setter
    def requestattach(self, requestattach):
        """Sets the requestattach of this InvitationReceiveRequest.

        Optional request attachment  # noqa: E501

        :param requestattach: The requestattach of this InvitationReceiveRequest.  # noqa: E501
        :type: list[AttachDecorator]
        """

        self._requestattach = requestattach

    @property
    def service(self):
        """Gets the service of this InvitationReceiveRequest.  # noqa: E501


        :return: The service of this InvitationReceiveRequest.  # noqa: E501
        :rtype: object
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this InvitationReceiveRequest.


        :param service: The service of this InvitationReceiveRequest.  # noqa: E501
        :type: object
        """

        self._service = service

    @property
    def service_blocks(self):
        """Gets the service_blocks of this InvitationReceiveRequest.  # noqa: E501


        :return: The service_blocks of this InvitationReceiveRequest.  # noqa: E501
        :rtype: list[Service]
        """
        return self._service_blocks

    @service_blocks.setter
    def service_blocks(self, service_blocks):
        """Sets the service_blocks of this InvitationReceiveRequest.


        :param service_blocks: The service_blocks of this InvitationReceiveRequest.  # noqa: E501
        :type: list[Service]
        """

        self._service_blocks = service_blocks

    @property
    def service_dids(self):
        """Gets the service_dids of this InvitationReceiveRequest.  # noqa: E501


        :return: The service_dids of this InvitationReceiveRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_dids

    @service_dids.setter
    def service_dids(self, service_dids):
        """Sets the service_dids of this InvitationReceiveRequest.


        :param service_dids: The service_dids of this InvitationReceiveRequest.  # noqa: E501
        :type: list[str]
        """

        self._service_dids = service_dids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationReceiveRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationReceiveRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvitationReceiveRequest):
            return True

        return self.to_dict() != other.to_dict()
