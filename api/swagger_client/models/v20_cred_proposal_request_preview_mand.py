# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class V20CredProposalRequestPreviewMand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_remove': 'bool',
        'comment': 'str',
        'connection_id': 'str',
        'credential_preview': 'V20CredPreview',
        'filter': 'object',
        'trace': 'bool'
    }

    attribute_map = {
        'auto_remove': 'auto_remove',
        'comment': 'comment',
        'connection_id': 'connection_id',
        'credential_preview': 'credential_preview',
        'filter': 'filter',
        'trace': 'trace'
    }

    def __init__(self, auto_remove=None, comment=None, connection_id=None, credential_preview=None, filter=None, trace=None, _configuration=None):  # noqa: E501
        """V20CredProposalRequestPreviewMand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_remove = None
        self._comment = None
        self._connection_id = None
        self._credential_preview = None
        self._filter = None
        self._trace = None
        self.discriminator = None

        if auto_remove is not None:
            self.auto_remove = auto_remove
        if comment is not None:
            self.comment = comment
        self.connection_id = connection_id
        self.credential_preview = credential_preview
        self.filter = filter
        if trace is not None:
            self.trace = trace

    @property
    def auto_remove(self):
        """Gets the auto_remove of this V20CredProposalRequestPreviewMand.  # noqa: E501

        Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)  # noqa: E501

        :return: The auto_remove of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :rtype: bool
        """
        return self._auto_remove

    @auto_remove.setter
    def auto_remove(self, auto_remove):
        """Sets the auto_remove of this V20CredProposalRequestPreviewMand.

        Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)  # noqa: E501

        :param auto_remove: The auto_remove of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :type: bool
        """

        self._auto_remove = auto_remove

    @property
    def comment(self):
        """Gets the comment of this V20CredProposalRequestPreviewMand.  # noqa: E501

        Human-readable comment  # noqa: E501

        :return: The comment of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V20CredProposalRequestPreviewMand.

        Human-readable comment  # noqa: E501

        :param comment: The comment of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def connection_id(self):
        """Gets the connection_id of this V20CredProposalRequestPreviewMand.  # noqa: E501

        Connection identifier  # noqa: E501

        :return: The connection_id of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this V20CredProposalRequestPreviewMand.

        Connection identifier  # noqa: E501

        :param connection_id: The connection_id of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    @property
    def credential_preview(self):
        """Gets the credential_preview of this V20CredProposalRequestPreviewMand.  # noqa: E501


        :return: The credential_preview of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :rtype: V20CredPreview
        """
        return self._credential_preview

    @credential_preview.setter
    def credential_preview(self, credential_preview):
        """Sets the credential_preview of this V20CredProposalRequestPreviewMand.


        :param credential_preview: The credential_preview of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :type: V20CredPreview
        """
        if self._configuration.client_side_validation and credential_preview is None:
            raise ValueError("Invalid value for `credential_preview`, must not be `None`")  # noqa: E501

        self._credential_preview = credential_preview

    @property
    def filter(self):
        """Gets the filter of this V20CredProposalRequestPreviewMand.  # noqa: E501

        Credential specification criteria by format  # noqa: E501

        :return: The filter of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :rtype: object
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this V20CredProposalRequestPreviewMand.

        Credential specification criteria by format  # noqa: E501

        :param filter: The filter of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    @property
    def trace(self):
        """Gets the trace of this V20CredProposalRequestPreviewMand.  # noqa: E501

        Whether to trace event (default false)  # noqa: E501

        :return: The trace of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :rtype: bool
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this V20CredProposalRequestPreviewMand.

        Whether to trace event (default false)  # noqa: E501

        :param trace: The trace of this V20CredProposalRequestPreviewMand.  # noqa: E501
        :type: bool
        """

        self._trace = trace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V20CredProposalRequestPreviewMand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V20CredProposalRequestPreviewMand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V20CredProposalRequestPreviewMand):
            return True

        return self.to_dict() != other.to_dict()
