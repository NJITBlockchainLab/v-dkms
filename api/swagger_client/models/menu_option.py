# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MenuOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'disabled': 'bool',
        'form': 'MenuForm',
        'name': 'str',
        'title': 'str'
    }

    attribute_map = {
        'description': 'description',
        'disabled': 'disabled',
        'form': 'form',
        'name': 'name',
        'title': 'title'
    }

    def __init__(self, description=None, disabled=None, form=None, name=None, title=None, _configuration=None):  # noqa: E501
        """MenuOption - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._disabled = None
        self._form = None
        self._name = None
        self._title = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if disabled is not None:
            self.disabled = disabled
        if form is not None:
            self.form = form
        self.name = name
        self.title = title

    @property
    def description(self):
        """Gets the description of this MenuOption.  # noqa: E501

        Additional descriptive text for menu option  # noqa: E501

        :return: The description of this MenuOption.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MenuOption.

        Additional descriptive text for menu option  # noqa: E501

        :param description: The description of this MenuOption.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this MenuOption.  # noqa: E501

        Whether to show option as disabled  # noqa: E501

        :return: The disabled of this MenuOption.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this MenuOption.

        Whether to show option as disabled  # noqa: E501

        :param disabled: The disabled of this MenuOption.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def form(self):
        """Gets the form of this MenuOption.  # noqa: E501


        :return: The form of this MenuOption.  # noqa: E501
        :rtype: MenuForm
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this MenuOption.


        :param form: The form of this MenuOption.  # noqa: E501
        :type: MenuForm
        """

        self._form = form

    @property
    def name(self):
        """Gets the name of this MenuOption.  # noqa: E501

        Menu option name (unique identifier)  # noqa: E501

        :return: The name of this MenuOption.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MenuOption.

        Menu option name (unique identifier)  # noqa: E501

        :param name: The name of this MenuOption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this MenuOption.  # noqa: E501

        Menu option title  # noqa: E501

        :return: The title of this MenuOption.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MenuOption.

        Menu option title  # noqa: E501

        :param title: The title of this MenuOption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MenuOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MenuOption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MenuOption):
            return True

        return self.to_dict() != other.to_dict()
