# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DIDXRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'did': 'str',
        'did_docattach': 'object',
        'label': 'str'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'did': 'did',
        'did_docattach': 'did_doc~attach',
        'label': 'label'
    }

    def __init__(self, id=None, type=None, did=None, did_docattach=None, label=None, _configuration=None):  # noqa: E501
        """DIDXRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._did = None
        self._did_docattach = None
        self._label = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if did is not None:
            self.did = did
        if did_docattach is not None:
            self.did_docattach = did_docattach
        self.label = label

    @property
    def id(self):
        """Gets the id of this DIDXRequest.  # noqa: E501

        Message identifier  # noqa: E501

        :return: The id of this DIDXRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DIDXRequest.

        Message identifier  # noqa: E501

        :param id: The id of this DIDXRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this DIDXRequest.  # noqa: E501

        Message type  # noqa: E501

        :return: The type of this DIDXRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DIDXRequest.

        Message type  # noqa: E501

        :param type: The type of this DIDXRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def did(self):
        """Gets the did of this DIDXRequest.  # noqa: E501

        DID of exchange  # noqa: E501

        :return: The did of this DIDXRequest.  # noqa: E501
        :rtype: str
        """
        return self._did

    @did.setter
    def did(self, did):
        """Sets the did of this DIDXRequest.

        DID of exchange  # noqa: E501

        :param did: The did of this DIDXRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                did is not None and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', did)):  # noqa: E501
            raise ValueError(r"Invalid value for `did`, must be a follow pattern or equal to `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501

        self._did = did

    @property
    def did_docattach(self):
        """Gets the did_docattach of this DIDXRequest.  # noqa: E501

        As signed attachment, DID Doc associated with DID  # noqa: E501

        :return: The did_docattach of this DIDXRequest.  # noqa: E501
        :rtype: object
        """
        return self._did_docattach

    @did_docattach.setter
    def did_docattach(self, did_docattach):
        """Sets the did_docattach of this DIDXRequest.

        As signed attachment, DID Doc associated with DID  # noqa: E501

        :param did_docattach: The did_docattach of this DIDXRequest.  # noqa: E501
        :type: object
        """

        self._did_docattach = did_docattach

    @property
    def label(self):
        """Gets the label of this DIDXRequest.  # noqa: E501

        Label for DID exchange request  # noqa: E501

        :return: The label of this DIDXRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DIDXRequest.

        Label for DID exchange request  # noqa: E501

        :param label: The label of this DIDXRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DIDXRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DIDXRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DIDXRequest):
            return True

        return self.to_dict() != other.to_dict()
