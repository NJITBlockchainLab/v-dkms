# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConnectionStaticRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'my_did': 'str',
        'my_seed': 'str',
        'their_did': 'str',
        'their_endpoint': 'str',
        'their_label': 'str',
        'their_seed': 'str',
        'their_verkey': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'my_did': 'my_did',
        'my_seed': 'my_seed',
        'their_did': 'their_did',
        'their_endpoint': 'their_endpoint',
        'their_label': 'their_label',
        'their_seed': 'their_seed',
        'their_verkey': 'their_verkey'
    }

    def __init__(self, alias=None, my_did=None, my_seed=None, their_did=None, their_endpoint=None, their_label=None, their_seed=None, their_verkey=None, _configuration=None):  # noqa: E501
        """ConnectionStaticRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alias = None
        self._my_did = None
        self._my_seed = None
        self._their_did = None
        self._their_endpoint = None
        self._their_label = None
        self._their_seed = None
        self._their_verkey = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        if my_did is not None:
            self.my_did = my_did
        if my_seed is not None:
            self.my_seed = my_seed
        if their_did is not None:
            self.their_did = their_did
        if their_endpoint is not None:
            self.their_endpoint = their_endpoint
        if their_label is not None:
            self.their_label = their_label
        if their_seed is not None:
            self.their_seed = their_seed
        if their_verkey is not None:
            self.their_verkey = their_verkey

    @property
    def alias(self):
        """Gets the alias of this ConnectionStaticRequest.  # noqa: E501

        Alias to assign to this connection  # noqa: E501

        :return: The alias of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ConnectionStaticRequest.

        Alias to assign to this connection  # noqa: E501

        :param alias: The alias of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def my_did(self):
        """Gets the my_did of this ConnectionStaticRequest.  # noqa: E501

        Local DID  # noqa: E501

        :return: The my_did of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._my_did

    @my_did.setter
    def my_did(self, my_did):
        """Sets the my_did of this ConnectionStaticRequest.

        Local DID  # noqa: E501

        :param my_did: The my_did of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                my_did is not None and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', my_did)):  # noqa: E501
            raise ValueError(r"Invalid value for `my_did`, must be a follow pattern or equal to `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501

        self._my_did = my_did

    @property
    def my_seed(self):
        """Gets the my_seed of this ConnectionStaticRequest.  # noqa: E501

        Seed to use for the local DID  # noqa: E501

        :return: The my_seed of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._my_seed

    @my_seed.setter
    def my_seed(self, my_seed):
        """Sets the my_seed of this ConnectionStaticRequest.

        Seed to use for the local DID  # noqa: E501

        :param my_seed: The my_seed of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """

        self._my_seed = my_seed

    @property
    def their_did(self):
        """Gets the their_did of this ConnectionStaticRequest.  # noqa: E501

        Remote DID  # noqa: E501

        :return: The their_did of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._their_did

    @their_did.setter
    def their_did(self, their_did):
        """Sets the their_did of this ConnectionStaticRequest.

        Remote DID  # noqa: E501

        :param their_did: The their_did of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                their_did is not None and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', their_did)):  # noqa: E501
            raise ValueError(r"Invalid value for `their_did`, must be a follow pattern or equal to `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501

        self._their_did = their_did

    @property
    def their_endpoint(self):
        """Gets the their_endpoint of this ConnectionStaticRequest.  # noqa: E501

        URL endpoint for other party  # noqa: E501

        :return: The their_endpoint of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._their_endpoint

    @their_endpoint.setter
    def their_endpoint(self, their_endpoint):
        """Sets the their_endpoint of this ConnectionStaticRequest.

        URL endpoint for other party  # noqa: E501

        :param their_endpoint: The their_endpoint of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                their_endpoint is not None and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', their_endpoint)):  # noqa: E501
            raise ValueError(r"Invalid value for `their_endpoint`, must be a follow pattern or equal to `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501

        self._their_endpoint = their_endpoint

    @property
    def their_label(self):
        """Gets the their_label of this ConnectionStaticRequest.  # noqa: E501

        Other party's label for this connection  # noqa: E501

        :return: The their_label of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._their_label

    @their_label.setter
    def their_label(self, their_label):
        """Sets the their_label of this ConnectionStaticRequest.

        Other party's label for this connection  # noqa: E501

        :param their_label: The their_label of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """

        self._their_label = their_label

    @property
    def their_seed(self):
        """Gets the their_seed of this ConnectionStaticRequest.  # noqa: E501

        Seed to use for the remote DID  # noqa: E501

        :return: The their_seed of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._their_seed

    @their_seed.setter
    def their_seed(self, their_seed):
        """Sets the their_seed of this ConnectionStaticRequest.

        Seed to use for the remote DID  # noqa: E501

        :param their_seed: The their_seed of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """

        self._their_seed = their_seed

    @property
    def their_verkey(self):
        """Gets the their_verkey of this ConnectionStaticRequest.  # noqa: E501

        Remote verification key  # noqa: E501

        :return: The their_verkey of this ConnectionStaticRequest.  # noqa: E501
        :rtype: str
        """
        return self._their_verkey

    @their_verkey.setter
    def their_verkey(self, their_verkey):
        """Sets the their_verkey of this ConnectionStaticRequest.

        Remote verification key  # noqa: E501

        :param their_verkey: The their_verkey of this ConnectionStaticRequest.  # noqa: E501
        :type: str
        """

        self._their_verkey = their_verkey

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionStaticRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionStaticRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionStaticRequest):
            return True

        return self.to_dict() != other.to_dict()
