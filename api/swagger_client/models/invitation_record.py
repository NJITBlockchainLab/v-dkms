# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InvitationRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'invi_msg_id': 'str',
        'invitation': 'object',
        'invitation_id': 'str',
        'invitation_url': 'str',
        'state': 'str',
        'trace': 'bool',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'invi_msg_id': 'invi_msg_id',
        'invitation': 'invitation',
        'invitation_id': 'invitation_id',
        'invitation_url': 'invitation_url',
        'state': 'state',
        'trace': 'trace',
        'updated_at': 'updated_at'
    }

    def __init__(self, created_at=None, invi_msg_id=None, invitation=None, invitation_id=None, invitation_url=None, state=None, trace=None, updated_at=None, _configuration=None):  # noqa: E501
        """InvitationRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._invi_msg_id = None
        self._invitation = None
        self._invitation_id = None
        self._invitation_url = None
        self._state = None
        self._trace = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if invi_msg_id is not None:
            self.invi_msg_id = invi_msg_id
        if invitation is not None:
            self.invitation = invitation
        if invitation_id is not None:
            self.invitation_id = invitation_id
        if invitation_url is not None:
            self.invitation_url = invitation_url
        if state is not None:
            self.state = state
        if trace is not None:
            self.trace = trace
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this InvitationRecord.  # noqa: E501

        Time of record creation  # noqa: E501

        :return: The created_at of this InvitationRecord.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InvitationRecord.

        Time of record creation  # noqa: E501

        :param created_at: The created_at of this InvitationRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                created_at is not None and not re.search(r'^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$', created_at)):  # noqa: E501
            raise ValueError(r"Invalid value for `created_at`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$/`")  # noqa: E501

        self._created_at = created_at

    @property
    def invi_msg_id(self):
        """Gets the invi_msg_id of this InvitationRecord.  # noqa: E501

        Invitation message identifier  # noqa: E501

        :return: The invi_msg_id of this InvitationRecord.  # noqa: E501
        :rtype: str
        """
        return self._invi_msg_id

    @invi_msg_id.setter
    def invi_msg_id(self, invi_msg_id):
        """Sets the invi_msg_id of this InvitationRecord.

        Invitation message identifier  # noqa: E501

        :param invi_msg_id: The invi_msg_id of this InvitationRecord.  # noqa: E501
        :type: str
        """

        self._invi_msg_id = invi_msg_id

    @property
    def invitation(self):
        """Gets the invitation of this InvitationRecord.  # noqa: E501

        Out of band invitation object  # noqa: E501

        :return: The invitation of this InvitationRecord.  # noqa: E501
        :rtype: object
        """
        return self._invitation

    @invitation.setter
    def invitation(self, invitation):
        """Sets the invitation of this InvitationRecord.

        Out of band invitation object  # noqa: E501

        :param invitation: The invitation of this InvitationRecord.  # noqa: E501
        :type: object
        """

        self._invitation = invitation

    @property
    def invitation_id(self):
        """Gets the invitation_id of this InvitationRecord.  # noqa: E501

        Invitation record identifier  # noqa: E501

        :return: The invitation_id of this InvitationRecord.  # noqa: E501
        :rtype: str
        """
        return self._invitation_id

    @invitation_id.setter
    def invitation_id(self, invitation_id):
        """Sets the invitation_id of this InvitationRecord.

        Invitation record identifier  # noqa: E501

        :param invitation_id: The invitation_id of this InvitationRecord.  # noqa: E501
        :type: str
        """

        self._invitation_id = invitation_id

    @property
    def invitation_url(self):
        """Gets the invitation_url of this InvitationRecord.  # noqa: E501

        Invitation message URL  # noqa: E501

        :return: The invitation_url of this InvitationRecord.  # noqa: E501
        :rtype: str
        """
        return self._invitation_url

    @invitation_url.setter
    def invitation_url(self, invitation_url):
        """Sets the invitation_url of this InvitationRecord.

        Invitation message URL  # noqa: E501

        :param invitation_url: The invitation_url of this InvitationRecord.  # noqa: E501
        :type: str
        """

        self._invitation_url = invitation_url

    @property
    def state(self):
        """Gets the state of this InvitationRecord.  # noqa: E501

        Out of band message exchange state  # noqa: E501

        :return: The state of this InvitationRecord.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InvitationRecord.

        Out of band message exchange state  # noqa: E501

        :param state: The state of this InvitationRecord.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def trace(self):
        """Gets the trace of this InvitationRecord.  # noqa: E501

        Record trace information, based on agent configuration  # noqa: E501

        :return: The trace of this InvitationRecord.  # noqa: E501
        :rtype: bool
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this InvitationRecord.

        Record trace information, based on agent configuration  # noqa: E501

        :param trace: The trace of this InvitationRecord.  # noqa: E501
        :type: bool
        """

        self._trace = trace

    @property
    def updated_at(self):
        """Gets the updated_at of this InvitationRecord.  # noqa: E501

        Time of last record update  # noqa: E501

        :return: The updated_at of this InvitationRecord.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InvitationRecord.

        Time of last record update  # noqa: E501

        :param updated_at: The updated_at of this InvitationRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                updated_at is not None and not re.search(r'^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$', updated_at)):  # noqa: E501
            raise ValueError(r"Invalid value for `updated_at`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$/`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvitationRecord):
            return True

        return self.to_dict() != other.to_dict()
