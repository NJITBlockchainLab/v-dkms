# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InvitationCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'attachments': 'list[AttachmentDef]',
        'handshake_protocols': 'list[str]',
        'mediation_id': 'str',
        'metadata': 'object',
        'my_label': 'str',
        'use_public_did': 'bool'
    }

    attribute_map = {
        'alias': 'alias',
        'attachments': 'attachments',
        'handshake_protocols': 'handshake_protocols',
        'mediation_id': 'mediation_id',
        'metadata': 'metadata',
        'my_label': 'my_label',
        'use_public_did': 'use_public_did'
    }

    def __init__(self, alias=None, attachments=None, handshake_protocols=None, mediation_id=None, metadata=None, my_label=None, use_public_did=None, _configuration=None):  # noqa: E501
        """InvitationCreateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alias = None
        self._attachments = None
        self._handshake_protocols = None
        self._mediation_id = None
        self._metadata = None
        self._my_label = None
        self._use_public_did = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        if attachments is not None:
            self.attachments = attachments
        if handshake_protocols is not None:
            self.handshake_protocols = handshake_protocols
        if mediation_id is not None:
            self.mediation_id = mediation_id
        if metadata is not None:
            self.metadata = metadata
        if my_label is not None:
            self.my_label = my_label
        if use_public_did is not None:
            self.use_public_did = use_public_did

    @property
    def alias(self):
        """Gets the alias of this InvitationCreateRequest.  # noqa: E501

        Alias for connection  # noqa: E501

        :return: The alias of this InvitationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this InvitationCreateRequest.

        Alias for connection  # noqa: E501

        :param alias: The alias of this InvitationCreateRequest.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def attachments(self):
        """Gets the attachments of this InvitationCreateRequest.  # noqa: E501

        Optional invitation attachments  # noqa: E501

        :return: The attachments of this InvitationCreateRequest.  # noqa: E501
        :rtype: list[AttachmentDef]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this InvitationCreateRequest.

        Optional invitation attachments  # noqa: E501

        :param attachments: The attachments of this InvitationCreateRequest.  # noqa: E501
        :type: list[AttachmentDef]
        """

        self._attachments = attachments

    @property
    def handshake_protocols(self):
        """Gets the handshake_protocols of this InvitationCreateRequest.  # noqa: E501


        :return: The handshake_protocols of this InvitationCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._handshake_protocols

    @handshake_protocols.setter
    def handshake_protocols(self, handshake_protocols):
        """Sets the handshake_protocols of this InvitationCreateRequest.


        :param handshake_protocols: The handshake_protocols of this InvitationCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._handshake_protocols = handshake_protocols

    @property
    def mediation_id(self):
        """Gets the mediation_id of this InvitationCreateRequest.  # noqa: E501

        Identifier for active mediation record to be used  # noqa: E501

        :return: The mediation_id of this InvitationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._mediation_id

    @mediation_id.setter
    def mediation_id(self, mediation_id):
        """Sets the mediation_id of this InvitationCreateRequest.

        Identifier for active mediation record to be used  # noqa: E501

        :param mediation_id: The mediation_id of this InvitationCreateRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                mediation_id is not None and not re.search(r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', mediation_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `mediation_id`, must be a follow pattern or equal to `/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501

        self._mediation_id = mediation_id

    @property
    def metadata(self):
        """Gets the metadata of this InvitationCreateRequest.  # noqa: E501

        Optional metadata to attach to the connection created with the invitation  # noqa: E501

        :return: The metadata of this InvitationCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InvitationCreateRequest.

        Optional metadata to attach to the connection created with the invitation  # noqa: E501

        :param metadata: The metadata of this InvitationCreateRequest.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def my_label(self):
        """Gets the my_label of this InvitationCreateRequest.  # noqa: E501

        Label for connection invitation  # noqa: E501

        :return: The my_label of this InvitationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._my_label

    @my_label.setter
    def my_label(self, my_label):
        """Sets the my_label of this InvitationCreateRequest.

        Label for connection invitation  # noqa: E501

        :param my_label: The my_label of this InvitationCreateRequest.  # noqa: E501
        :type: str
        """

        self._my_label = my_label

    @property
    def use_public_did(self):
        """Gets the use_public_did of this InvitationCreateRequest.  # noqa: E501

        Whether to use public DID in invitation  # noqa: E501

        :return: The use_public_did of this InvitationCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_public_did

    @use_public_did.setter
    def use_public_did(self, use_public_did):
        """Sets the use_public_did of this InvitationCreateRequest.

        Whether to use public DID in invitation  # noqa: E501

        :param use_public_did: The use_public_did of this InvitationCreateRequest.  # noqa: E501
        :type: bool
        """

        self._use_public_did = use_public_did

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvitationCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
