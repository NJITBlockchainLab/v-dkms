# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IndyProofReqAttrSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'names': 'list[str]',
        'non_revoked': 'IndyProofReqNonRevoked',
        'restrictions': 'list[dict(str, str)]'
    }

    attribute_map = {
        'name': 'name',
        'names': 'names',
        'non_revoked': 'non_revoked',
        'restrictions': 'restrictions'
    }

    def __init__(self, name=None, names=None, non_revoked=None, restrictions=None, _configuration=None):  # noqa: E501
        """IndyProofReqAttrSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._names = None
        self._non_revoked = None
        self._restrictions = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if names is not None:
            self.names = names
        if non_revoked is not None:
            self.non_revoked = non_revoked
        if restrictions is not None:
            self.restrictions = restrictions

    @property
    def name(self):
        """Gets the name of this IndyProofReqAttrSpec.  # noqa: E501

        Attribute name  # noqa: E501

        :return: The name of this IndyProofReqAttrSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndyProofReqAttrSpec.

        Attribute name  # noqa: E501

        :param name: The name of this IndyProofReqAttrSpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def names(self):
        """Gets the names of this IndyProofReqAttrSpec.  # noqa: E501

        Attribute name group  # noqa: E501

        :return: The names of this IndyProofReqAttrSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this IndyProofReqAttrSpec.

        Attribute name group  # noqa: E501

        :param names: The names of this IndyProofReqAttrSpec.  # noqa: E501
        :type: list[str]
        """

        self._names = names

    @property
    def non_revoked(self):
        """Gets the non_revoked of this IndyProofReqAttrSpec.  # noqa: E501


        :return: The non_revoked of this IndyProofReqAttrSpec.  # noqa: E501
        :rtype: IndyProofReqNonRevoked
        """
        return self._non_revoked

    @non_revoked.setter
    def non_revoked(self, non_revoked):
        """Sets the non_revoked of this IndyProofReqAttrSpec.


        :param non_revoked: The non_revoked of this IndyProofReqAttrSpec.  # noqa: E501
        :type: IndyProofReqNonRevoked
        """

        self._non_revoked = non_revoked

    @property
    def restrictions(self):
        """Gets the restrictions of this IndyProofReqAttrSpec.  # noqa: E501

        If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name  # noqa: E501

        :return: The restrictions of this IndyProofReqAttrSpec.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this IndyProofReqAttrSpec.

        If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name  # noqa: E501

        :param restrictions: The restrictions of this IndyProofReqAttrSpec.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._restrictions = restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndyProofReqAttrSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndyProofReqAttrSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndyProofReqAttrSpec):
            return True

        return self.to_dict() != other.to_dict()
