# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CredentialDefinitionSendRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'revocation_registry_size': 'int',
        'schema_id': 'str',
        'support_revocation': 'bool',
        'tag': 'str'
    }

    attribute_map = {
        'revocation_registry_size': 'revocation_registry_size',
        'schema_id': 'schema_id',
        'support_revocation': 'support_revocation',
        'tag': 'tag'
    }

    def __init__(self, revocation_registry_size=None, schema_id=None, support_revocation=None, tag=None, _configuration=None):  # noqa: E501
        """CredentialDefinitionSendRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._revocation_registry_size = None
        self._schema_id = None
        self._support_revocation = None
        self._tag = None
        self.discriminator = None

        if revocation_registry_size is not None:
            self.revocation_registry_size = revocation_registry_size
        if schema_id is not None:
            self.schema_id = schema_id
        if support_revocation is not None:
            self.support_revocation = support_revocation
        if tag is not None:
            self.tag = tag

    @property
    def revocation_registry_size(self):
        """Gets the revocation_registry_size of this CredentialDefinitionSendRequest.  # noqa: E501

        Revocation registry size  # noqa: E501

        :return: The revocation_registry_size of this CredentialDefinitionSendRequest.  # noqa: E501
        :rtype: int
        """
        return self._revocation_registry_size

    @revocation_registry_size.setter
    def revocation_registry_size(self, revocation_registry_size):
        """Sets the revocation_registry_size of this CredentialDefinitionSendRequest.

        Revocation registry size  # noqa: E501

        :param revocation_registry_size: The revocation_registry_size of this CredentialDefinitionSendRequest.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                revocation_registry_size is not None and revocation_registry_size > 32768):  # noqa: E501
            raise ValueError("Invalid value for `revocation_registry_size`, must be a value less than or equal to `32768`")  # noqa: E501
        if (self._configuration.client_side_validation and
                revocation_registry_size is not None and revocation_registry_size < 4):  # noqa: E501
            raise ValueError("Invalid value for `revocation_registry_size`, must be a value greater than or equal to `4`")  # noqa: E501

        self._revocation_registry_size = revocation_registry_size

    @property
    def schema_id(self):
        """Gets the schema_id of this CredentialDefinitionSendRequest.  # noqa: E501

        Schema identifier  # noqa: E501

        :return: The schema_id of this CredentialDefinitionSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this CredentialDefinitionSendRequest.

        Schema identifier  # noqa: E501

        :param schema_id: The schema_id of this CredentialDefinitionSendRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                schema_id is not None and not re.search(r'^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$', schema_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `schema_id`, must be a follow pattern or equal to `/^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$/`")  # noqa: E501

        self._schema_id = schema_id

    @property
    def support_revocation(self):
        """Gets the support_revocation of this CredentialDefinitionSendRequest.  # noqa: E501

        Revocation supported flag  # noqa: E501

        :return: The support_revocation of this CredentialDefinitionSendRequest.  # noqa: E501
        :rtype: bool
        """
        return self._support_revocation

    @support_revocation.setter
    def support_revocation(self, support_revocation):
        """Sets the support_revocation of this CredentialDefinitionSendRequest.

        Revocation supported flag  # noqa: E501

        :param support_revocation: The support_revocation of this CredentialDefinitionSendRequest.  # noqa: E501
        :type: bool
        """

        self._support_revocation = support_revocation

    @property
    def tag(self):
        """Gets the tag of this CredentialDefinitionSendRequest.  # noqa: E501

        Credential definition identifier tag  # noqa: E501

        :return: The tag of this CredentialDefinitionSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CredentialDefinitionSendRequest.

        Credential definition identifier tag  # noqa: E501

        :param tag: The tag of this CredentialDefinitionSendRequest.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialDefinitionSendRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialDefinitionSendRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredentialDefinitionSendRequest):
            return True

        return self.to_dict() != other.to_dict()
