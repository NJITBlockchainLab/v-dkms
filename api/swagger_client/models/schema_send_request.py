# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SchemaSendRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'list[str]',
        'schema_name': 'str',
        'schema_version': 'str'
    }

    attribute_map = {
        'attributes': 'attributes',
        'schema_name': 'schema_name',
        'schema_version': 'schema_version'
    }

    def __init__(self, attributes=None, schema_name=None, schema_version=None, _configuration=None):  # noqa: E501
        """SchemaSendRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attributes = None
        self._schema_name = None
        self._schema_version = None
        self.discriminator = None

        self.attributes = attributes
        self.schema_name = schema_name
        self.schema_version = schema_version

    @property
    def attributes(self):
        """Gets the attributes of this SchemaSendRequest.  # noqa: E501

        List of schema attributes  # noqa: E501

        :return: The attributes of this SchemaSendRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SchemaSendRequest.

        List of schema attributes  # noqa: E501

        :param attributes: The attributes of this SchemaSendRequest.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def schema_name(self):
        """Gets the schema_name of this SchemaSendRequest.  # noqa: E501

        Schema name  # noqa: E501

        :return: The schema_name of this SchemaSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this SchemaSendRequest.

        Schema name  # noqa: E501

        :param schema_name: The schema_name of this SchemaSendRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def schema_version(self):
        """Gets the schema_version of this SchemaSendRequest.  # noqa: E501

        Schema version  # noqa: E501

        :return: The schema_version of this SchemaSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this SchemaSendRequest.

        Schema version  # noqa: E501

        :param schema_version: The schema_version of this SchemaSendRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                schema_version is not None and not re.search(r'^[0-9.]+$', schema_version)):  # noqa: E501
            raise ValueError(r"Invalid value for `schema_version`, must be a follow pattern or equal to `/^[0-9.]+$/`")  # noqa: E501

        self._schema_version = schema_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaSendRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaSendRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchemaSendRequest):
            return True

        return self.to_dict() != other.to_dict()
