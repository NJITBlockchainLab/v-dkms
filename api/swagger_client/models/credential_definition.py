# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CredentialDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'schema_id': 'str',
        'tag': 'str',
        'type': 'object',
        'value': 'object',
        'ver': 'str'
    }

    attribute_map = {
        'id': 'id',
        'schema_id': 'schemaId',
        'tag': 'tag',
        'type': 'type',
        'value': 'value',
        'ver': 'ver'
    }

    def __init__(self, id=None, schema_id=None, tag=None, type=None, value=None, ver=None, _configuration=None):  # noqa: E501
        """CredentialDefinition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._schema_id = None
        self._tag = None
        self._type = None
        self._value = None
        self._ver = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if schema_id is not None:
            self.schema_id = schema_id
        if tag is not None:
            self.tag = tag
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if ver is not None:
            self.ver = ver

    @property
    def id(self):
        """Gets the id of this CredentialDefinition.  # noqa: E501

        Credential definition identifier  # noqa: E501

        :return: The id of this CredentialDefinition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredentialDefinition.

        Credential definition identifier  # noqa: E501

        :param id: The id of this CredentialDefinition.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and not re.search(r'^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$/`")  # noqa: E501

        self._id = id

    @property
    def schema_id(self):
        """Gets the schema_id of this CredentialDefinition.  # noqa: E501

        Schema identifier within credential definition identifier  # noqa: E501

        :return: The schema_id of this CredentialDefinition.  # noqa: E501
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this CredentialDefinition.

        Schema identifier within credential definition identifier  # noqa: E501

        :param schema_id: The schema_id of this CredentialDefinition.  # noqa: E501
        :type: str
        """

        self._schema_id = schema_id

    @property
    def tag(self):
        """Gets the tag of this CredentialDefinition.  # noqa: E501

        Tag within credential definition identifier  # noqa: E501

        :return: The tag of this CredentialDefinition.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CredentialDefinition.

        Tag within credential definition identifier  # noqa: E501

        :param tag: The tag of this CredentialDefinition.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def type(self):
        """Gets the type of this CredentialDefinition.  # noqa: E501

        Signature type: CL for Camenisch-Lysyanskaya  # noqa: E501

        :return: The type of this CredentialDefinition.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CredentialDefinition.

        Signature type: CL for Camenisch-Lysyanskaya  # noqa: E501

        :param type: The type of this CredentialDefinition.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this CredentialDefinition.  # noqa: E501

        Credential definition primary and revocation values  # noqa: E501

        :return: The value of this CredentialDefinition.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CredentialDefinition.

        Credential definition primary and revocation values  # noqa: E501

        :param value: The value of this CredentialDefinition.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def ver(self):
        """Gets the ver of this CredentialDefinition.  # noqa: E501

        Node protocol version  # noqa: E501

        :return: The ver of this CredentialDefinition.  # noqa: E501
        :rtype: str
        """
        return self._ver

    @ver.setter
    def ver(self, ver):
        """Sets the ver of this CredentialDefinition.

        Node protocol version  # noqa: E501

        :param ver: The ver of this CredentialDefinition.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ver is not None and not re.search(r'^[0-9.]+$', ver)):  # noqa: E501
            raise ValueError(r"Invalid value for `ver`, must be a follow pattern or equal to `/^[0-9.]+$/`")  # noqa: E501

        self._ver = ver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredentialDefinition):
            return True

        return self.to_dict() != other.to_dict()
