# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'did': 'str',
        'id': 'str',
        'recipient_keys': 'list[str]',
        'routing_keys': 'list[str]',
        'service_endpoint': 'str',
        'type': 'str'
    }

    attribute_map = {
        'did': 'did',
        'id': 'id',
        'recipient_keys': 'recipientKeys',
        'routing_keys': 'routingKeys',
        'service_endpoint': 'serviceEndpoint',
        'type': 'type'
    }

    def __init__(self, did=None, id=None, recipient_keys=None, routing_keys=None, service_endpoint=None, type=None, _configuration=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._did = None
        self._id = None
        self._recipient_keys = None
        self._routing_keys = None
        self._service_endpoint = None
        self._type = None
        self.discriminator = None

        if did is not None:
            self.did = did
        self.id = id
        if recipient_keys is not None:
            self.recipient_keys = recipient_keys
        if routing_keys is not None:
            self.routing_keys = routing_keys
        if service_endpoint is not None:
            self.service_endpoint = service_endpoint
        self.type = type

    @property
    def did(self):
        """Gets the did of this Service.  # noqa: E501

        Service DID  # noqa: E501

        :return: The did of this Service.  # noqa: E501
        :rtype: str
        """
        return self._did

    @did.setter
    def did(self, did):
        """Sets the did of this Service.

        Service DID  # noqa: E501

        :param did: The did of this Service.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                did is not None and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', did)):  # noqa: E501
            raise ValueError(r"Invalid value for `did`, must be a follow pattern or equal to `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501

        self._did = did

    @property
    def id(self):
        """Gets the id of this Service.  # noqa: E501

        Service identifier  # noqa: E501

        :return: The id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.

        Service identifier  # noqa: E501

        :param id: The id of this Service.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def recipient_keys(self):
        """Gets the recipient_keys of this Service.  # noqa: E501

        List of recipient keys  # noqa: E501

        :return: The recipient_keys of this Service.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipient_keys

    @recipient_keys.setter
    def recipient_keys(self, recipient_keys):
        """Sets the recipient_keys of this Service.

        List of recipient keys  # noqa: E501

        :param recipient_keys: The recipient_keys of this Service.  # noqa: E501
        :type: list[str]
        """

        self._recipient_keys = recipient_keys

    @property
    def routing_keys(self):
        """Gets the routing_keys of this Service.  # noqa: E501

        List of routing keys  # noqa: E501

        :return: The routing_keys of this Service.  # noqa: E501
        :rtype: list[str]
        """
        return self._routing_keys

    @routing_keys.setter
    def routing_keys(self, routing_keys):
        """Sets the routing_keys of this Service.

        List of routing keys  # noqa: E501

        :param routing_keys: The routing_keys of this Service.  # noqa: E501
        :type: list[str]
        """

        self._routing_keys = routing_keys

    @property
    def service_endpoint(self):
        """Gets the service_endpoint of this Service.  # noqa: E501

        Service endpoint at which to reach this agent  # noqa: E501

        :return: The service_endpoint of this Service.  # noqa: E501
        :rtype: str
        """
        return self._service_endpoint

    @service_endpoint.setter
    def service_endpoint(self, service_endpoint):
        """Sets the service_endpoint of this Service.

        Service endpoint at which to reach this agent  # noqa: E501

        :param service_endpoint: The service_endpoint of this Service.  # noqa: E501
        :type: str
        """

        self._service_endpoint = service_endpoint

    @property
    def type(self):
        """Gets the type of this Service.  # noqa: E501

        Service type  # noqa: E501

        :return: The type of this Service.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.

        Service type  # noqa: E501

        :param type: The type of this Service.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Service):
            return True

        return self.to_dict() != other.to_dict()
