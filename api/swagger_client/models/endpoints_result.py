# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EndpointsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'my_endpoint': 'str',
        'their_endpoint': 'str'
    }

    attribute_map = {
        'my_endpoint': 'my_endpoint',
        'their_endpoint': 'their_endpoint'
    }

    def __init__(self, my_endpoint=None, their_endpoint=None, _configuration=None):  # noqa: E501
        """EndpointsResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._my_endpoint = None
        self._their_endpoint = None
        self.discriminator = None

        if my_endpoint is not None:
            self.my_endpoint = my_endpoint
        if their_endpoint is not None:
            self.their_endpoint = their_endpoint

    @property
    def my_endpoint(self):
        """Gets the my_endpoint of this EndpointsResult.  # noqa: E501

        My endpoint  # noqa: E501

        :return: The my_endpoint of this EndpointsResult.  # noqa: E501
        :rtype: str
        """
        return self._my_endpoint

    @my_endpoint.setter
    def my_endpoint(self, my_endpoint):
        """Sets the my_endpoint of this EndpointsResult.

        My endpoint  # noqa: E501

        :param my_endpoint: The my_endpoint of this EndpointsResult.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                my_endpoint is not None and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', my_endpoint)):  # noqa: E501
            raise ValueError(r"Invalid value for `my_endpoint`, must be a follow pattern or equal to `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501

        self._my_endpoint = my_endpoint

    @property
    def their_endpoint(self):
        """Gets the their_endpoint of this EndpointsResult.  # noqa: E501

        Their endpoint  # noqa: E501

        :return: The their_endpoint of this EndpointsResult.  # noqa: E501
        :rtype: str
        """
        return self._their_endpoint

    @their_endpoint.setter
    def their_endpoint(self, their_endpoint):
        """Sets the their_endpoint of this EndpointsResult.

        Their endpoint  # noqa: E501

        :param their_endpoint: The their_endpoint of this EndpointsResult.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                their_endpoint is not None and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', their_endpoint)):  # noqa: E501
            raise ValueError(r"Invalid value for `their_endpoint`, must be a follow pattern or equal to `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501

        self._their_endpoint = their_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointsResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EndpointsResult):
            return True

        return self.to_dict() != other.to_dict()
