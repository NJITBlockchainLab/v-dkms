# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TAAInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aml_record': 'AMLRecord',
        'taa_accepted': 'TAAAcceptance',
        'taa_record': 'TAARecord',
        'taa_required': 'bool'
    }

    attribute_map = {
        'aml_record': 'aml_record',
        'taa_accepted': 'taa_accepted',
        'taa_record': 'taa_record',
        'taa_required': 'taa_required'
    }

    def __init__(self, aml_record=None, taa_accepted=None, taa_record=None, taa_required=None, _configuration=None):  # noqa: E501
        """TAAInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aml_record = None
        self._taa_accepted = None
        self._taa_record = None
        self._taa_required = None
        self.discriminator = None

        if aml_record is not None:
            self.aml_record = aml_record
        if taa_accepted is not None:
            self.taa_accepted = taa_accepted
        if taa_record is not None:
            self.taa_record = taa_record
        if taa_required is not None:
            self.taa_required = taa_required

    @property
    def aml_record(self):
        """Gets the aml_record of this TAAInfo.  # noqa: E501


        :return: The aml_record of this TAAInfo.  # noqa: E501
        :rtype: AMLRecord
        """
        return self._aml_record

    @aml_record.setter
    def aml_record(self, aml_record):
        """Sets the aml_record of this TAAInfo.


        :param aml_record: The aml_record of this TAAInfo.  # noqa: E501
        :type: AMLRecord
        """

        self._aml_record = aml_record

    @property
    def taa_accepted(self):
        """Gets the taa_accepted of this TAAInfo.  # noqa: E501


        :return: The taa_accepted of this TAAInfo.  # noqa: E501
        :rtype: TAAAcceptance
        """
        return self._taa_accepted

    @taa_accepted.setter
    def taa_accepted(self, taa_accepted):
        """Sets the taa_accepted of this TAAInfo.


        :param taa_accepted: The taa_accepted of this TAAInfo.  # noqa: E501
        :type: TAAAcceptance
        """

        self._taa_accepted = taa_accepted

    @property
    def taa_record(self):
        """Gets the taa_record of this TAAInfo.  # noqa: E501


        :return: The taa_record of this TAAInfo.  # noqa: E501
        :rtype: TAARecord
        """
        return self._taa_record

    @taa_record.setter
    def taa_record(self, taa_record):
        """Sets the taa_record of this TAAInfo.


        :param taa_record: The taa_record of this TAAInfo.  # noqa: E501
        :type: TAARecord
        """

        self._taa_record = taa_record

    @property
    def taa_required(self):
        """Gets the taa_required of this TAAInfo.  # noqa: E501


        :return: The taa_required of this TAAInfo.  # noqa: E501
        :rtype: bool
        """
        return self._taa_required

    @taa_required.setter
    def taa_required(self, taa_required):
        """Sets the taa_required of this TAAInfo.


        :param taa_required: The taa_required of this TAAInfo.  # noqa: E501
        :type: bool
        """

        self._taa_required = taa_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TAAInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TAAInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TAAInfo):
            return True

        return self.to_dict() != other.to_dict()
