# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConnRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept': 'str',
        'alias': 'str',
        'connection_id': 'str',
        'created_at': 'str',
        'error_msg': 'str',
        'inbound_connection_id': 'str',
        'invitation_key': 'str',
        'invitation_mode': 'str',
        'invitation_msg_id': 'str',
        'my_did': 'str',
        'request_id': 'str',
        'rfc23_state': 'str',
        'routing_state': 'str',
        'state': 'str',
        'their_did': 'str',
        'their_label': 'str',
        'their_public_did': 'str',
        'their_role': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'accept': 'accept',
        'alias': 'alias',
        'connection_id': 'connection_id',
        'created_at': 'created_at',
        'error_msg': 'error_msg',
        'inbound_connection_id': 'inbound_connection_id',
        'invitation_key': 'invitation_key',
        'invitation_mode': 'invitation_mode',
        'invitation_msg_id': 'invitation_msg_id',
        'my_did': 'my_did',
        'request_id': 'request_id',
        'rfc23_state': 'rfc23_state',
        'routing_state': 'routing_state',
        'state': 'state',
        'their_did': 'their_did',
        'their_label': 'their_label',
        'their_public_did': 'their_public_did',
        'their_role': 'their_role',
        'updated_at': 'updated_at'
    }

    def __init__(self, accept=None, alias=None, connection_id=None, created_at=None, error_msg=None, inbound_connection_id=None, invitation_key=None, invitation_mode=None, invitation_msg_id=None, my_did=None, request_id=None, rfc23_state=None, routing_state=None, state=None, their_did=None, their_label=None, their_public_did=None, their_role=None, updated_at=None, _configuration=None):  # noqa: E501
        """ConnRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accept = None
        self._alias = None
        self._connection_id = None
        self._created_at = None
        self._error_msg = None
        self._inbound_connection_id = None
        self._invitation_key = None
        self._invitation_mode = None
        self._invitation_msg_id = None
        self._my_did = None
        self._request_id = None
        self._rfc23_state = None
        self._routing_state = None
        self._state = None
        self._their_did = None
        self._their_label = None
        self._their_public_did = None
        self._their_role = None
        self._updated_at = None
        self.discriminator = None

        if accept is not None:
            self.accept = accept
        if alias is not None:
            self.alias = alias
        if connection_id is not None:
            self.connection_id = connection_id
        if created_at is not None:
            self.created_at = created_at
        if error_msg is not None:
            self.error_msg = error_msg
        if inbound_connection_id is not None:
            self.inbound_connection_id = inbound_connection_id
        if invitation_key is not None:
            self.invitation_key = invitation_key
        if invitation_mode is not None:
            self.invitation_mode = invitation_mode
        if invitation_msg_id is not None:
            self.invitation_msg_id = invitation_msg_id
        if my_did is not None:
            self.my_did = my_did
        if request_id is not None:
            self.request_id = request_id
        if rfc23_state is not None:
            self.rfc23_state = rfc23_state
        if routing_state is not None:
            self.routing_state = routing_state
        if state is not None:
            self.state = state
        if their_did is not None:
            self.their_did = their_did
        if their_label is not None:
            self.their_label = their_label
        if their_public_did is not None:
            self.their_public_did = their_public_did
        if their_role is not None:
            self.their_role = their_role
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def accept(self):
        """Gets the accept of this ConnRecord.  # noqa: E501

        Connection acceptance: manual or auto  # noqa: E501

        :return: The accept of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._accept

    @accept.setter
    def accept(self, accept):
        """Sets the accept of this ConnRecord.

        Connection acceptance: manual or auto  # noqa: E501

        :param accept: The accept of this ConnRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["manual", "auto"]  # noqa: E501
        if (self._configuration.client_side_validation and
                accept not in allowed_values):
            raise ValueError(
                "Invalid value for `accept` ({0}), must be one of {1}"  # noqa: E501
                .format(accept, allowed_values)
            )

        self._accept = accept

    @property
    def alias(self):
        """Gets the alias of this ConnRecord.  # noqa: E501

        Optional alias to apply to connection for later use  # noqa: E501

        :return: The alias of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ConnRecord.

        Optional alias to apply to connection for later use  # noqa: E501

        :param alias: The alias of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def connection_id(self):
        """Gets the connection_id of this ConnRecord.  # noqa: E501

        Connection identifier  # noqa: E501

        :return: The connection_id of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ConnRecord.

        Connection identifier  # noqa: E501

        :param connection_id: The connection_id of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def created_at(self):
        """Gets the created_at of this ConnRecord.  # noqa: E501

        Time of record creation  # noqa: E501

        :return: The created_at of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnRecord.

        Time of record creation  # noqa: E501

        :param created_at: The created_at of this ConnRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                created_at is not None and not re.search(r'^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$', created_at)):  # noqa: E501
            raise ValueError(r"Invalid value for `created_at`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$/`")  # noqa: E501

        self._created_at = created_at

    @property
    def error_msg(self):
        """Gets the error_msg of this ConnRecord.  # noqa: E501

        Error message  # noqa: E501

        :return: The error_msg of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this ConnRecord.

        Error message  # noqa: E501

        :param error_msg: The error_msg of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._error_msg = error_msg

    @property
    def inbound_connection_id(self):
        """Gets the inbound_connection_id of this ConnRecord.  # noqa: E501

        Inbound routing connection id to use  # noqa: E501

        :return: The inbound_connection_id of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._inbound_connection_id

    @inbound_connection_id.setter
    def inbound_connection_id(self, inbound_connection_id):
        """Sets the inbound_connection_id of this ConnRecord.

        Inbound routing connection id to use  # noqa: E501

        :param inbound_connection_id: The inbound_connection_id of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._inbound_connection_id = inbound_connection_id

    @property
    def invitation_key(self):
        """Gets the invitation_key of this ConnRecord.  # noqa: E501

        Public key for connection  # noqa: E501

        :return: The invitation_key of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._invitation_key

    @invitation_key.setter
    def invitation_key(self, invitation_key):
        """Sets the invitation_key of this ConnRecord.

        Public key for connection  # noqa: E501

        :param invitation_key: The invitation_key of this ConnRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                invitation_key is not None and not re.search(r'^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$', invitation_key)):  # noqa: E501
            raise ValueError(r"Invalid value for `invitation_key`, must be a follow pattern or equal to `/^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$/`")  # noqa: E501

        self._invitation_key = invitation_key

    @property
    def invitation_mode(self):
        """Gets the invitation_mode of this ConnRecord.  # noqa: E501

        Invitation mode  # noqa: E501

        :return: The invitation_mode of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._invitation_mode

    @invitation_mode.setter
    def invitation_mode(self, invitation_mode):
        """Sets the invitation_mode of this ConnRecord.

        Invitation mode  # noqa: E501

        :param invitation_mode: The invitation_mode of this ConnRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["once", "multi", "static"]  # noqa: E501
        if (self._configuration.client_side_validation and
                invitation_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `invitation_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(invitation_mode, allowed_values)
            )

        self._invitation_mode = invitation_mode

    @property
    def invitation_msg_id(self):
        """Gets the invitation_msg_id of this ConnRecord.  # noqa: E501

        ID of out-of-band invitation message  # noqa: E501

        :return: The invitation_msg_id of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._invitation_msg_id

    @invitation_msg_id.setter
    def invitation_msg_id(self, invitation_msg_id):
        """Sets the invitation_msg_id of this ConnRecord.

        ID of out-of-band invitation message  # noqa: E501

        :param invitation_msg_id: The invitation_msg_id of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._invitation_msg_id = invitation_msg_id

    @property
    def my_did(self):
        """Gets the my_did of this ConnRecord.  # noqa: E501

        Our DID for connection  # noqa: E501

        :return: The my_did of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._my_did

    @my_did.setter
    def my_did(self, my_did):
        """Sets the my_did of this ConnRecord.

        Our DID for connection  # noqa: E501

        :param my_did: The my_did of this ConnRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                my_did is not None and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', my_did)):  # noqa: E501
            raise ValueError(r"Invalid value for `my_did`, must be a follow pattern or equal to `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501

        self._my_did = my_did

    @property
    def request_id(self):
        """Gets the request_id of this ConnRecord.  # noqa: E501

        Connection request identifier  # noqa: E501

        :return: The request_id of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ConnRecord.

        Connection request identifier  # noqa: E501

        :param request_id: The request_id of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def rfc23_state(self):
        """Gets the rfc23_state of this ConnRecord.  # noqa: E501

        State per RFC 23  # noqa: E501

        :return: The rfc23_state of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._rfc23_state

    @rfc23_state.setter
    def rfc23_state(self, rfc23_state):
        """Sets the rfc23_state of this ConnRecord.

        State per RFC 23  # noqa: E501

        :param rfc23_state: The rfc23_state of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._rfc23_state = rfc23_state

    @property
    def routing_state(self):
        """Gets the routing_state of this ConnRecord.  # noqa: E501

        Routing state of connection  # noqa: E501

        :return: The routing_state of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._routing_state

    @routing_state.setter
    def routing_state(self, routing_state):
        """Sets the routing_state of this ConnRecord.

        Routing state of connection  # noqa: E501

        :param routing_state: The routing_state of this ConnRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "request", "active", "error"]  # noqa: E501
        if (self._configuration.client_side_validation and
                routing_state not in allowed_values):
            raise ValueError(
                "Invalid value for `routing_state` ({0}), must be one of {1}"  # noqa: E501
                .format(routing_state, allowed_values)
            )

        self._routing_state = routing_state

    @property
    def state(self):
        """Gets the state of this ConnRecord.  # noqa: E501

        Current record state  # noqa: E501

        :return: The state of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnRecord.

        Current record state  # noqa: E501

        :param state: The state of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def their_did(self):
        """Gets the their_did of this ConnRecord.  # noqa: E501

        Their DID for connection  # noqa: E501

        :return: The their_did of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._their_did

    @their_did.setter
    def their_did(self, their_did):
        """Sets the their_did of this ConnRecord.

        Their DID for connection  # noqa: E501

        :param their_did: The their_did of this ConnRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                their_did is not None and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', their_did)):  # noqa: E501
            raise ValueError(r"Invalid value for `their_did`, must be a follow pattern or equal to `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501

        self._their_did = their_did

    @property
    def their_label(self):
        """Gets the their_label of this ConnRecord.  # noqa: E501

        Their label for connection  # noqa: E501

        :return: The their_label of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._their_label

    @their_label.setter
    def their_label(self, their_label):
        """Sets the their_label of this ConnRecord.

        Their label for connection  # noqa: E501

        :param their_label: The their_label of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._their_label = their_label

    @property
    def their_public_did(self):
        """Gets the their_public_did of this ConnRecord.  # noqa: E501

        Other agent's public DID for connection  # noqa: E501

        :return: The their_public_did of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._their_public_did

    @their_public_did.setter
    def their_public_did(self, their_public_did):
        """Sets the their_public_did of this ConnRecord.

        Other agent's public DID for connection  # noqa: E501

        :param their_public_did: The their_public_did of this ConnRecord.  # noqa: E501
        :type: str
        """

        self._their_public_did = their_public_did

    @property
    def their_role(self):
        """Gets the their_role of this ConnRecord.  # noqa: E501

        Their role in the connection protocol  # noqa: E501

        :return: The their_role of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._their_role

    @their_role.setter
    def their_role(self, their_role):
        """Sets the their_role of this ConnRecord.

        Their role in the connection protocol  # noqa: E501

        :param their_role: The their_role of this ConnRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["invitee", "requester", "inviter", "responder"]  # noqa: E501
        if (self._configuration.client_side_validation and
                their_role not in allowed_values):
            raise ValueError(
                "Invalid value for `their_role` ({0}), must be one of {1}"  # noqa: E501
                .format(their_role, allowed_values)
            )

        self._their_role = their_role

    @property
    def updated_at(self):
        """Gets the updated_at of this ConnRecord.  # noqa: E501

        Time of last record update  # noqa: E501

        :return: The updated_at of this ConnRecord.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConnRecord.

        Time of last record update  # noqa: E501

        :param updated_at: The updated_at of this ConnRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                updated_at is not None and not re.search(r'^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$', updated_at)):  # noqa: E501
            raise ValueError(r"Invalid value for `updated_at`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$/`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnRecord):
            return True

        return self.to_dict() != other.to_dict()
