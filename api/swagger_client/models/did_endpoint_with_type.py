# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DIDEndpointWithType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'did': 'str',
        'endpoint': 'str',
        'endpoint_type': 'str'
    }

    attribute_map = {
        'did': 'did',
        'endpoint': 'endpoint',
        'endpoint_type': 'endpoint_type'
    }

    def __init__(self, did=None, endpoint=None, endpoint_type=None, _configuration=None):  # noqa: E501
        """DIDEndpointWithType - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._did = None
        self._endpoint = None
        self._endpoint_type = None
        self.discriminator = None

        self.did = did
        if endpoint is not None:
            self.endpoint = endpoint
        if endpoint_type is not None:
            self.endpoint_type = endpoint_type

    @property
    def did(self):
        """Gets the did of this DIDEndpointWithType.  # noqa: E501

        DID of interest  # noqa: E501

        :return: The did of this DIDEndpointWithType.  # noqa: E501
        :rtype: str
        """
        return self._did

    @did.setter
    def did(self, did):
        """Sets the did of this DIDEndpointWithType.

        DID of interest  # noqa: E501

        :param did: The did of this DIDEndpointWithType.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and did is None:
            raise ValueError("Invalid value for `did`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                did is not None and not re.search(r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$', did)):  # noqa: E501
            raise ValueError(r"Invalid value for `did`, must be a follow pattern or equal to `/^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$/`")  # noqa: E501

        self._did = did

    @property
    def endpoint(self):
        """Gets the endpoint of this DIDEndpointWithType.  # noqa: E501

        Endpoint to set (omit to delete)  # noqa: E501

        :return: The endpoint of this DIDEndpointWithType.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this DIDEndpointWithType.

        Endpoint to set (omit to delete)  # noqa: E501

        :param endpoint: The endpoint of this DIDEndpointWithType.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                endpoint is not None and not re.search(r'^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$', endpoint)):  # noqa: E501
            raise ValueError(r"Invalid value for `endpoint`, must be a follow pattern or equal to `/^[A-Za-z0-9\\.\\-\\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$/`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this DIDEndpointWithType.  # noqa: E501

        Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs  # noqa: E501

        :return: The endpoint_type of this DIDEndpointWithType.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this DIDEndpointWithType.

        Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs  # noqa: E501

        :param endpoint_type: The endpoint_type of this DIDEndpointWithType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Endpoint", "Profile", "LinkedDomains"]  # noqa: E501
        if (self._configuration.client_side_validation and
                endpoint_type not in allowed_values):
            raise ValueError(
                "Invalid value for `endpoint_type` ({0}), must be one of {1}"  # noqa: E501
                .format(endpoint_type, allowed_values)
            )

        self._endpoint_type = endpoint_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DIDEndpointWithType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DIDEndpointWithType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DIDEndpointWithType):
            return True

        return self.to_dict() != other.to_dict()
