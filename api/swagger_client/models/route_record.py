# coding: utf-8

"""
    sp

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RouteRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'str',
        'created_at': 'str',
        'recipient_key': 'str',
        'record_id': 'str',
        'role': 'str',
        'state': 'str',
        'updated_at': 'str',
        'wallet_id': 'str'
    }

    attribute_map = {
        'connection_id': 'connection_id',
        'created_at': 'created_at',
        'recipient_key': 'recipient_key',
        'record_id': 'record_id',
        'role': 'role',
        'state': 'state',
        'updated_at': 'updated_at',
        'wallet_id': 'wallet_id'
    }

    def __init__(self, connection_id=None, created_at=None, recipient_key=None, record_id=None, role=None, state=None, updated_at=None, wallet_id=None, _configuration=None):  # noqa: E501
        """RouteRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_id = None
        self._created_at = None
        self._recipient_key = None
        self._record_id = None
        self._role = None
        self._state = None
        self._updated_at = None
        self._wallet_id = None
        self.discriminator = None

        if connection_id is not None:
            self.connection_id = connection_id
        if created_at is not None:
            self.created_at = created_at
        self.recipient_key = recipient_key
        if record_id is not None:
            self.record_id = record_id
        if role is not None:
            self.role = role
        if state is not None:
            self.state = state
        if updated_at is not None:
            self.updated_at = updated_at
        if wallet_id is not None:
            self.wallet_id = wallet_id

    @property
    def connection_id(self):
        """Gets the connection_id of this RouteRecord.  # noqa: E501


        :return: The connection_id of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this RouteRecord.


        :param connection_id: The connection_id of this RouteRecord.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def created_at(self):
        """Gets the created_at of this RouteRecord.  # noqa: E501

        Time of record creation  # noqa: E501

        :return: The created_at of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RouteRecord.

        Time of record creation  # noqa: E501

        :param created_at: The created_at of this RouteRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                created_at is not None and not re.search(r'^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$', created_at)):  # noqa: E501
            raise ValueError(r"Invalid value for `created_at`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$/`")  # noqa: E501

        self._created_at = created_at

    @property
    def recipient_key(self):
        """Gets the recipient_key of this RouteRecord.  # noqa: E501


        :return: The recipient_key of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._recipient_key

    @recipient_key.setter
    def recipient_key(self, recipient_key):
        """Sets the recipient_key of this RouteRecord.


        :param recipient_key: The recipient_key of this RouteRecord.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and recipient_key is None:
            raise ValueError("Invalid value for `recipient_key`, must not be `None`")  # noqa: E501

        self._recipient_key = recipient_key

    @property
    def record_id(self):
        """Gets the record_id of this RouteRecord.  # noqa: E501


        :return: The record_id of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this RouteRecord.


        :param record_id: The record_id of this RouteRecord.  # noqa: E501
        :type: str
        """

        self._record_id = record_id

    @property
    def role(self):
        """Gets the role of this RouteRecord.  # noqa: E501


        :return: The role of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RouteRecord.


        :param role: The role of this RouteRecord.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def state(self):
        """Gets the state of this RouteRecord.  # noqa: E501

        Current record state  # noqa: E501

        :return: The state of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RouteRecord.

        Current record state  # noqa: E501

        :param state: The state of this RouteRecord.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this RouteRecord.  # noqa: E501

        Time of last record update  # noqa: E501

        :return: The updated_at of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RouteRecord.

        Time of last record update  # noqa: E501

        :param updated_at: The updated_at of this RouteRecord.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                updated_at is not None and not re.search(r'^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$', updated_at)):  # noqa: E501
            raise ValueError(r"Invalid value for `updated_at`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$/`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def wallet_id(self):
        """Gets the wallet_id of this RouteRecord.  # noqa: E501


        :return: The wallet_id of this RouteRecord.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this RouteRecord.


        :param wallet_id: The wallet_id of this RouteRecord.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RouteRecord):
            return True

        return self.to_dict() != other.to_dict()
